window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "SignalCliApi", "modulename": "SignalCliApi", "kind": "module", "doc": "<p>File: __init__.py</p>\n"}, {"fullname": "SignalCliApi.signalAccount", "modulename": "SignalCliApi.signalAccount", "kind": "module", "doc": "<p>File: signalAccount.py\nStore account information.</p>\n"}, {"fullname": "SignalCliApi.signalAccount.Account", "modulename": "SignalCliApi.signalAccount", "qualname": "Account", "kind": "class", "doc": "<p>Class to store an account.</p>\n"}, {"fullname": "SignalCliApi.signalAccount.Account.__init__", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.__init__", "kind": "function", "doc": "<p>Initialize the Account.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sync_socket</strong>:  The sync socket.</li>\n<li><strong>command_socket</strong>:  The command socket.</li>\n<li><strong>config_path</strong>:  The path to the config directory.</li>\n<li><strong>sticker_packs</strong>:  The sticker packs object.</li>\n<li><strong>signal_account_path</strong>:  The filename of the account details file.</li>\n<li><strong>environment</strong>:  The environment variable from accounts.json.</li>\n<li><strong>number</strong>:  The phone number of the account.</li>\n<li><strong>uuid</strong>:  The UUID of the account.</li>\n<li><strong>do_load</strong>:  True, load the account from the account detail file, False do not load.</li>\n<li><strong>device: Optional</strong>:  The Device object for this account.</li>\n<li><strong>devices: Optional</strong>:  The Devices object for this account.</li>\n<li><strong>contacts: Optional</strong>:  The Contacts object for this account.</li>\n<li><strong>groups: Optional</strong>:  The Groups object for this account.</li>\n<li><strong>profile: Optional</strong>:  The Profile object for this account.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If a parameter is of invalid type.</li>\n<li><strong>InvalidDataFile</strong>:  If a file contains invalid JSON or a KeyError occurs during loading.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sync_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sticker_packs</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">StickerPacks</span>,</span><span class=\"param\">\t<span class=\"n\">signal_account_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">environment</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">uuid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">profile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalProfile</span><span class=\"o\">.</span><span class=\"n\">Profile</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalAccount.Account.supportedAccountFileVersions", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.supportedAccountFileVersions", "kind": "variable", "doc": "<p>Supported account detail file versions.</p>\n", "annotation": ": tuple[int, int]", "default_value": "(5, 6, 8)"}, {"fullname": "SignalCliApi.signalAccount.Account.config_path", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.config_path", "kind": "variable", "doc": "<p>The path to the signal-cli config directory.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalAccount.Account.environment", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.environment", "kind": "variable", "doc": "<p>The 'environment' from accounts.json.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalAccount.Account.number", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.number", "kind": "variable", "doc": "<p>The account phone number.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalAccount.Account.uuid", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.uuid", "kind": "variable", "doc": "<p>The account uuid.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalAccount.Account.device", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.device", "kind": "variable", "doc": "<p>The Device object.</p>\n", "annotation": ": Optional[SignalCliApi.signalDevice.Device]"}, {"fullname": "SignalCliApi.signalAccount.Account.devices", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.devices", "kind": "variable", "doc": "<p>The account Devices object.</p>\n", "annotation": ": Optional[SignalCliApi.signalDevices.Devices]"}, {"fullname": "SignalCliApi.signalAccount.Account.contacts", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.contacts", "kind": "variable", "doc": "<p>The account Contacts object.</p>\n", "annotation": ": Optional[SignalCliApi.signalContacts.Contacts]"}, {"fullname": "SignalCliApi.signalAccount.Account.groups", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.groups", "kind": "variable", "doc": "<p>The account Groups object.</p>\n", "annotation": ": Optional[SignalCliApi.signalGroups.Groups]"}, {"fullname": "SignalCliApi.signalAccount.Account.profile", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.profile", "kind": "variable", "doc": "<p>The account Profile object.</p>\n", "annotation": ": Optional[SignalCliApi.signalProfile.Profile]"}, {"fullname": "SignalCliApi.signalAccount.Account.version", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.version", "kind": "variable", "doc": "<p>The account detail version.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalAccount.Account.registered", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.registered", "kind": "variable", "doc": "<p>Is this account fully registered?</p>\n", "annotation": ": Optional[bool]"}, {"fullname": "SignalCliApi.signalAccount.Account.username", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.username", "kind": "variable", "doc": "<p>The username of the account.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.service_environment", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.service_environment", "kind": "variable", "doc": "<p>The 'service environment' from the account detail file.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.pni", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.pni", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.device_name", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.device_name", "kind": "variable", "doc": "<p>This device name?</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.device_id", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.device_id", "kind": "variable", "doc": "<p>This device ID</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalAccount.Account.is_multi_device", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.is_multi_device", "kind": "variable", "doc": "<p>Does this account have multiple devices?</p>\n", "annotation": ": Optional[bool]"}, {"fullname": "SignalCliApi.signalAccount.Account.last_received_timestamp", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.last_received_timestamp", "kind": "variable", "doc": "<p>Timestamp object of the last time a message was received.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalAccount.Account.password", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.password", "kind": "variable", "doc": "<p>Password?</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.registration_id", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.registration_id", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalAccount.Account.pni_registration_id", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.pni_registration_id", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalAccount.Account.identity_private_key", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.identity_private_key", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.identity_key", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.identity_key", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.pni_identity_private_key", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.pni_identity_private_key", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.pni_identity_key", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.pni_identity_key", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.registration_lock_pin", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.registration_lock_pin", "kind": "variable", "doc": "<p>The registration lock pin.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.pin_master_key", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.pin_master_key", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.storage_key", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.storage_key", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[Any]"}, {"fullname": "SignalCliApi.signalAccount.Account.storage_manifest_version", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.storage_manifest_version", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[Any]"}, {"fullname": "SignalCliApi.signalAccount.Account.pre_key_id_offset", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.pre_key_id_offset", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalAccount.Account.next_signed_pre_key_id", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.next_signed_pre_key_id", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalAccount.Account.pni_pre_key_id_offset", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.pni_pre_key_id_offset", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalAccount.Account.pni_next_signed_pre_key_id", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.pni_next_signed_pre_key_id", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalAccount.Account.configuration_store", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.configuration_store", "kind": "variable", "doc": "<p>Signal configuration options.</p>\n", "annotation": ": Optional[dict[str, bool | str]]"}, {"fullname": "SignalCliApi.signalAccount.Account.profile_key", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.profile_key", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.encrypted_device_name", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.encrypted_device_name", "kind": "variable", "doc": "<p>Encrypted device name, might be device name from version 5.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAccount.Account.aci_account_data", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.aci_account_data", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[dict[str, str | int]]"}, {"fullname": "SignalCliApi.signalAccount.Account.pni_account_data", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.pni_account_data", "kind": "variable", "doc": "<p>I don't know.</p>\n", "annotation": ": Optional[dict[str, str | int]]"}, {"fullname": "SignalCliApi.signalAccount.Account.verify", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.verify", "kind": "function", "doc": "<p>Verify an account.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>code: str</strong>:  The code sent via sms or voice call.</li>\n<li><strong>pin: Optional[str]</strong>:  The registered pin for this account.\n:returns: tuple[bool, str]: Boolean represents success or failure, str is an error message on failure, or\n\"verification successful\" on success.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>InvalidServerResponse</strong>:  On error decoding JSON.</li>\n<li><strong>CommunicationsError</strong>:  On error during signal communications.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">pin</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalAccount.Account.get_id", "modulename": "SignalCliApi.signalAccount", "qualname": "Account.get_id", "kind": "function", "doc": "<p>Get the account's ID.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: Either the account's phone number or UUID if the number doesn't exist for some reason.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalAccounts", "modulename": "SignalCliApi.signalAccounts", "kind": "module", "doc": "<p>File: signalAccounts.py\nMaintain and manage a list of accounts.</p>\n"}, {"fullname": "SignalCliApi.signalAccounts.ACCOUNTS", "modulename": "SignalCliApi.signalAccounts", "qualname": "ACCOUNTS", "kind": "variable", "doc": "<p>The main accounts list.</p>\n", "annotation": ": list[SignalCliApi.signalAccount.Account]", "default_value": "[]"}, {"fullname": "SignalCliApi.signalAccounts.Accounts", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts", "kind": "class", "doc": "<p>Class to store the known accounts.</p>\n"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.__init__", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.__init__", "kind": "function", "doc": "<p>Initialize the accounts:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sync_socket: socket.socket</strong>:  The socket to run sync operations on.</li>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>config_path: str</strong>:  The path to the signal-cli direcotry.</li>\n<li><strong>sticker_packs: StickerPacks</strong>:  The loaded StickerPacks object.</li>\n<li><strong>do_load: bool</strong>:  Load from disk right away; Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sync_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sticker_packs</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">StickerPacks</span>,</span><span class=\"param\">\t<span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.supported_accounts_versions", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.supported_accounts_versions", "kind": "variable", "doc": "<p>Supported accounts.json versions.</p>\n", "annotation": ": tuple[int]", "default_value": "(2,)"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.logger", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.logger", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.get_registered", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.get_registered", "kind": "function", "doc": "<p>Get accounts that are both known and registered.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>list[Account]: The registerd accounts, or an empty list if none found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.get_unregistered", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.get_unregistered", "kind": "function", "doc": "<p>Get accounts that are unregistered, but known.\n:returns: list[Account]: The unregistered accounts, or an empty list if none found.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.get_by_number", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.get_by_number", "kind": "function", "doc": "<p>Get an account by phone number.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number: str</strong>:  The phone number in format +nnnnnnnnn...\n:returns: Optional[Account]: The account found or None if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If number is not a string.</li>\n<li>ValueError: If number not in proper format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.get_by_uuid", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.get_by_uuid", "kind": "function", "doc": "<p>Get an account by UUID.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uuid: str</strong>:  the UUID to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[Account]</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  if the uuid is not a string.</li>\n<li><strong>ValueError</strong>:  if the uuid is not in the correct format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uuid</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.get_by_username", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.get_by_username", "kind": "function", "doc": "<p>Get an account by username.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>username: str</strong>:  The username to search for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[Account]: The Account object or None if not found.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If username is not a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">username</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.num_accounts", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.num_accounts", "kind": "variable", "doc": "<p>The total number of accounts.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The total number of accounts.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.num_registered", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.num_registered", "kind": "variable", "doc": "<p>The number of registered accounts.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number of registered accounts.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalAccounts.Accounts.num_unregistered", "modulename": "SignalCliApi.signalAccounts", "qualname": "Accounts.num_unregistered", "kind": "variable", "doc": "<p>The nubmer of unregistered accounts.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number of unregistered accounts.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalAttachment", "modulename": "SignalCliApi.signalAttachment", "kind": "module", "doc": "<p>File: signalAttachment.py\nStore and manage a signal attachment.</p>\n"}, {"fullname": "SignalCliApi.signalAttachment.Attachment", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment", "kind": "class", "doc": "<p>Class to store an attachment.</p>\n"}, {"fullname": "SignalCliApi.signalAttachment.Attachment.__init__", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment.__init__", "kind": "function", "doc": "<p>Initialize an Attachment object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_path: str</strong>:  The path to the signal-cli config directory.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  The dict provided by __to_dict__().</li>\n<li><strong>raw_attachment: Optional[dict[str, Any]]</strong>:  The dict provided by signal.</li>\n<li><strong>local_path: Optional[str]</strong>:  The local path of this attachment.</li>\n<li><strong>thumbnail: Optional[Thumbnail]</strong>:  The Thumbnail object for this attachment.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_attachment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">local_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">thumbnail</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalThumbnail</span><span class=\"o\">.</span><span class=\"n\">Thumbnail</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalAttachment.Attachment.content_type", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment.content_type", "kind": "variable", "doc": "<p>The content-type of the attachment.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAttachment.Attachment.filename", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment.filename", "kind": "variable", "doc": "<p>The filename of this attachment.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAttachment.Attachment.size", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment.size", "kind": "variable", "doc": "<p>The size in bytes of the attachment.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalAttachment.Attachment.local_path", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment.local_path", "kind": "variable", "doc": "<p>The path to the local copy of the attachment.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalAttachment.Attachment.exists", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment.exists", "kind": "variable", "doc": "<p>Does the local file exist?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalAttachment.Attachment.thumbnail", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment.thumbnail", "kind": "variable", "doc": "<p>The Thumbnail object for this attachment.</p>\n", "annotation": ": Optional[SignalCliApi.signalThumbnail.Thumbnail]"}, {"fullname": "SignalCliApi.signalAttachment.Attachment.get_local_path", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment.get_local_path", "kind": "function", "doc": "<p>Get the local path.\n:returns: Optional[str]: The path to the local copy of the file or None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalAttachment.Attachment.display", "modulename": "SignalCliApi.signalAttachment", "qualname": "Attachment.display", "kind": "function", "doc": "<p>Call xdg-open on the local copy of the attachment if it exists.\n:returns: bool: True if xdg-open was successfully called.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalCallMessage", "modulename": "SignalCliApi.signalCallMessage", "kind": "module", "doc": "<p>File: signalCallMessage.py</p>\n"}, {"fullname": "SignalCliApi.signalCallMessage.CallMessage", "modulename": "SignalCliApi.signalCallMessage", "qualname": "CallMessage", "kind": "class", "doc": "<p>Class to store a call message.</p>\n", "bases": "SignalCliApi.signalMessage.Message"}, {"fullname": "SignalCliApi.signalCallMessage.CallMessage.__init__", "modulename": "SignalCliApi.signalCallMessage", "qualname": "CallMessage.__init__", "kind": "function", "doc": "<p>Initialize a call message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>account_id: str</strong>:  This account's ID.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts Devices object.</li>\n<li><strong>this_device: Device</strong>:  The Device object for the device we're using.</li>\n<li><strong>from_dict: dict[str, Any]</strong>:  Load properties from a dict created by __to_dict__()</li>\n<li><strong>raw_message:  dict[str, Any]</strong>:  Load properties from a dict provided by signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalCallMessage.CallMessage.offer_id", "modulename": "SignalCliApi.signalCallMessage", "qualname": "CallMessage.offer_id", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalCallMessage.CallMessage.sdp", "modulename": "SignalCliApi.signalCallMessage", "qualname": "CallMessage.sdp", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Any]"}, {"fullname": "SignalCliApi.signalCallMessage.CallMessage.call_type", "modulename": "SignalCliApi.signalCallMessage", "qualname": "CallMessage.call_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalCallMessage.CallMessage.opaque", "modulename": "SignalCliApi.signalCallMessage", "qualname": "CallMessage.opaque", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalCli", "modulename": "SignalCliApi.signalCli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "SignalCliApi.signalCli.SignalCli", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli", "kind": "class", "doc": "<p>Signal cli object.</p>\n"}, {"fullname": "SignalCliApi.signalCli.SignalCli.__init__", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.__init__", "kind": "function", "doc": "<p>Initialize signal-cli, starting the process if required.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>signal_config_path: Optional[str]</strong>:  The path to the directory signal-cli should use.</li>\n<li><strong>signal_exec_path: Optional[str]</strong>:  The path to the signal-cli executable.</li>\n<li><strong>server_address: Optional[list[str , int] | tuple[str, int] | str]</strong>:  If signal-cli is already started,\nthe address of the server, if a unix socket, use a str, otherwise use a tuple/list[hostname:str,port:int]</li>\n<li><strong>log_file_path: Optional[str]</strong>:  The path to the signal log file, if None, no logging is preformed.</li>\n<li><strong>start_signal: Bool</strong>:  True = start a signal-cli process, False = signal-cli is already running.</li>\n<li><strong>callback: Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  The call back as a tuple, the first element\nbeing the callable, and the second element; If not None, is a list of any parameters to provide to the\ncallback.  The callback signature is: (status: str, *params)</li>\n<li><strong>debug: Bool</strong>:  Produce debug output on stdout.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If a parameter is of invalid type.</li>\n<li><strong>FileNotFoundError</strong>:  If a file / directory doesn't exist when it should.</li>\n<li><strong>FileExistsError</strong>:  If a socket file exists when it shouldn't.</li>\n<li><strong>RuntimeError</strong>:  If an error occurs while loading signal data, more information in the error message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">signal_config_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">signal_exec_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">server_address</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">log_file_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_signal</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "SignalCliApi.signalCli.SignalCli.config_path", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.config_path", "kind": "variable", "doc": "<p>The full path to the signal config directory.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalCli.SignalCli.accounts", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.accounts", "kind": "variable", "doc": "<p>The Accounts object.</p>\n", "annotation": ": Optional[SignalCliApi.signalAccounts.Accounts]"}, {"fullname": "SignalCliApi.signalCli.SignalCli.sticker_packs", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.sticker_packs", "kind": "variable", "doc": "<p>Known StickerPacks object.</p>\n", "annotation": ": Optional[SignalCliApi.signalSticker.StickerPacks]"}, {"fullname": "SignalCliApi.signalCli.SignalCli.stop_signal", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.stop_signal", "kind": "function", "doc": "<p>Stop the signal-cli process.\n:returns: None</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>CommunicationsError</strong>:  On error closing a socket.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalCli.SignalCli.register_account", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.register_account", "kind": "function", "doc": "<p>Register a new account. NOTE: Subject to rate limiting.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number: str</strong>:  The phone number to register.</li>\n<li><strong>captcha: str: The captcha from 'https</strong>: //signalcaptchas.org/registration/generate.html', can\ninclude the 'signalcaptcha://'.</li>\n<li><strong>voice: bool</strong>:  True = Voice call verification, False = SMS verification.\n:returns: tuple[bool, Account | str]: The first element (bool) is True for success or failure.  The\nsecond element on success is the new Account object, which\nwill remain in an unregistered state until verify is called\nwith the verification code.  Upon failure, the second element\nwill contain a string with an error message.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If number or captcha are not strings, or if voice is not a boolean.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">captcha</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">voice</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalCli.SignalCli.start_link", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.start_link", "kind": "function", "doc": "<p>Start the link process for linking an existing account.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>gen_text_qr: bool</strong>:  True, generate text qr-code, False, do not.</li>\n<li><strong>png_qr_code_file_path: Optional[str]</strong>:  The file path to generate the png qr code at, if None, the qr code\nis not generated.\n:returns: tuple[str, str, str]: The first element is the link url generated by signal.\nThe second element is a text QR code string, or an empty string if qrencode is not installed.\nThe third element is a path to a generated png qrencode, or an empty string if qrencode is not installed.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If name is not a string or None.</li>\n<li>LinkInProgress: If a link is already in progress when start_link_account is called a second time and\nfinish_link has not been called.</li>\n<li><strong>InvalidServerResponse</strong>:  If the signal link doesn't seem valid.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">gen_text_qr</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">png_qr_code_file_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalCli.SignalCli.finish_link", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.finish_link", "kind": "function", "doc": "<p>Finish the linking process after confirming the link on the primary device.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>device_name: Optional[str]</strong>:  The device name to give this link.\n:returns: tuple[bool, Account | str]: The first element is a bool representing success or failure; The second\nelement on success will be the new Account object, or on failure will be\na string containing an error message.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>LinkNotStarted</strong>:  If the link process hasn't been started yet.</li>\n<li><strong>InvalidServerResponse</strong>:  If the signal success code is not recognized.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">device_name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalCli.SignalCli.start_receive", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.start_receive", "kind": "function", "doc": "<p>Start receiving messages for the given account.\nNOTE: Callback signature is (account: Account, message: Message)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>account: Account</strong>:  The account to receive messages for.</li>\n<li><strong>all_messages_callback: Optional[Callable]</strong>:  Callback for all messages received.</li>\n<li><strong>received_message_callback: Optional[Callable]</strong>:  Callback for received messages. (regular message)</li>\n<li><strong>receipt_message_callback: Optional[Callable]</strong>:  Callback for receipt messages.</li>\n<li><strong>sync_message_callback: Optional[Callable]</strong>:  Callback for sync messages.</li>\n<li><strong>typing_message_callback: Optional[Callable]</strong>:  Callback for typing messages.</li>\n<li><strong>story_message_callback: Optional[Callable]</strong>:  Callback for story messages.</li>\n<li><strong>payment_message_callback: Optional[Callable]</strong>:  Callback for payment messages.</li>\n<li><strong>reaction_message_callback: Optional[Callable]</strong>:  Callback for reaction messages.</li>\n<li><strong>call_message_callback: Optional[Callable]</strong>:  Callback for incoming call messages.\n:returns: None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If the account is not an Account object, or if a callback is defined, but not callable.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span>,</span><span class=\"param\">\t<span class=\"n\">all_messages_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">received_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">receipt_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sync_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">typing_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">story_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">payment_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reaction_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">call_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalCli.SignalCli.stop_receive", "modulename": "SignalCliApi.signalCli", "qualname": "SignalCli.stop_receive", "kind": "function", "doc": "<p>Stop receiving messages for the given account.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>account: Account</strong>:  The account to stop reception for.\n:returns: bool: True reception successfully stopped, False reception wasn't started.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If the parameter account is not an Account object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalCommon", "modulename": "SignalCliApi.signalCommon", "kind": "module", "doc": "<p>File: signalCommon.py\nCommon Constants, Vars, and helper functions.</p>\n"}, {"fullname": "SignalCliApi.signalCommon.VERSION", "modulename": "SignalCliApi.signalCommon", "qualname": "VERSION", "kind": "variable", "doc": "<p>Version of the library</p>\n", "annotation": ": Final[str]", "default_value": "&#x27;0.3.0&#x27;"}, {"fullname": "SignalCliApi.signalCommon.phone_number_regex", "modulename": "SignalCliApi.signalCommon", "qualname": "phone_number_regex", "kind": "variable", "doc": "<p>Regex matching a phone number.</p>\n", "annotation": ": Final[Pattern]", "default_value": "re.compile(&#x27;(?P&lt;number&gt;\\\\+\\\\d+)&#x27;)"}, {"fullname": "SignalCliApi.signalCommon.uuid_regex", "modulename": "SignalCliApi.signalCommon", "qualname": "uuid_regex", "kind": "variable", "doc": "<p>Regex matching a UUID.</p>\n", "annotation": ": Final[Pattern]", "default_value": "re.compile(&#x27;(?P&lt;uuid&gt;[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-f0-9]{12})&#x27;)"}, {"fullname": "SignalCliApi.signalCommon.UUID_FORMAT_STR", "modulename": "SignalCliApi.signalCommon", "qualname": "UUID_FORMAT_STR", "kind": "variable", "doc": "<p>UUID format string.</p>\n", "annotation": ": Final[str]", "default_value": "&#x27;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&#x27;"}, {"fullname": "SignalCliApi.signalCommon.NUMBER_FORMAT_STR", "modulename": "SignalCliApi.signalCommon", "qualname": "NUMBER_FORMAT_STR", "kind": "variable", "doc": "<p>Number format string.</p>\n", "annotation": ": Final[str]", "default_value": "&#x27;+nnnnnnn...&#x27;"}, {"fullname": "SignalCliApi.signalCommon.SELF_CONTACT_NAME", "modulename": "SignalCliApi.signalCommon", "qualname": "SELF_CONTACT_NAME", "kind": "variable", "doc": "<p>The contact name for the self-contact.</p>\n", "annotation": ": Final[str]", "default_value": "&#x27;Note-To-Self&#x27;"}, {"fullname": "SignalCliApi.signalCommon.UNKNOWN_CONTACT_NAME", "modulename": "SignalCliApi.signalCommon", "qualname": "UNKNOWN_CONTACT_NAME", "kind": "variable", "doc": "<p>The default name for an unknown contact. If this the contact name it signals the library to update it if ever an\nactual name for the contact comes up.</p>\n", "annotation": ": Final[str]", "default_value": "&#x27;&lt;UNKNOWN-CONTACT&gt;&#x27;"}, {"fullname": "SignalCliApi.signalCommon.UNKNOWN_GROUP_NAME", "modulename": "SignalCliApi.signalCommon", "qualname": "UNKNOWN_GROUP_NAME", "kind": "variable", "doc": "<p>The default name for an unknown group. If this is the group name it signals the library to update it if even an\nactual group name comes up.</p>\n", "annotation": ": Final[str]", "default_value": "&#x27;&lt;UNKNOWN-GROUP&gt;&#x27;"}, {"fullname": "SignalCliApi.signalCommon.UNKNOWN_DEVICE_NAME", "modulename": "SignalCliApi.signalCommon", "qualname": "UNKNOWN_DEVICE_NAME", "kind": "variable", "doc": "<p>The default name for an unknown device.</p>\n", "annotation": ": Final[str]", "default_value": "&#x27;&lt;UNKNOWN-DEVICE&gt;&#x27;"}, {"fullname": "SignalCliApi.signalCommon.PRIMARY_DEVICE_ID", "modulename": "SignalCliApi.signalCommon", "qualname": "PRIMARY_DEVICE_ID", "kind": "variable", "doc": "<p>The device ID of the primary device for an account.</p>\n", "annotation": ": Final[int]", "default_value": "1"}, {"fullname": "SignalCliApi.signalCommon.STICKER_MANIFEST_FILENAME", "modulename": "SignalCliApi.signalCommon", "qualname": "STICKER_MANIFEST_FILENAME", "kind": "variable", "doc": "<p>The filename of a sticker manifest file.</p>\n", "annotation": ": Final[str]", "default_value": "&#x27;manifest.json&#x27;"}, {"fullname": "SignalCliApi.signalCommon.CallbackIdx", "modulename": "SignalCliApi.signalCommon", "qualname": "CallbackIdx", "kind": "class", "doc": "<p>Enum to index the callbacks. (Callable, Optional[list[Any]])</p>\n", "bases": "enum.IntEnum"}, {"fullname": "SignalCliApi.signalCommon.CallbackIdx.CALLABLE", "modulename": "SignalCliApi.signalCommon", "qualname": "CallbackIdx.CALLABLE", "kind": "variable", "doc": "<p>Callback callable index.</p>\n", "default_value": "&lt;CallbackIdx.CALLABLE: 0&gt;"}, {"fullname": "SignalCliApi.signalCommon.CallbackIdx.PARAMS", "modulename": "SignalCliApi.signalCommon", "qualname": "CallbackIdx.PARAMS", "kind": "variable", "doc": "<p>Callback parameters index.</p>\n", "default_value": "&lt;CallbackIdx.PARAMS: 1&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes", "kind": "class", "doc": "<p>Enum for message types:</p>\n", "bases": "enum.IntEnum"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.NOT_SET", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.NOT_SET", "kind": "variable", "doc": "<p>Message type not set.</p>\n", "default_value": "&lt;MessageTypes.NOT_SET: 1&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.SENT", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.SENT", "kind": "variable", "doc": "<p>Sent message type.</p>\n", "default_value": "&lt;MessageTypes.SENT: 2&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.RECEIVED", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.RECEIVED", "kind": "variable", "doc": "<p>Received message type.</p>\n", "default_value": "&lt;MessageTypes.RECEIVED: 3&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.TYPING", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.TYPING", "kind": "variable", "doc": "<p>Typing message type.</p>\n", "default_value": "&lt;MessageTypes.TYPING: 4&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.RECEIPT", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.RECEIPT", "kind": "variable", "doc": "<p>Receipt message type.</p>\n", "default_value": "&lt;MessageTypes.RECEIPT: 5&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.STORY", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.STORY", "kind": "variable", "doc": "<p>Story message type.</p>\n", "default_value": "&lt;MessageTypes.STORY: 6&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.PAYMENT", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.PAYMENT", "kind": "variable", "doc": "<p>Payment message type.</p>\n", "default_value": "&lt;MessageTypes.PAYMENT: 7&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.REACTION", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.REACTION", "kind": "variable", "doc": "<p>Reaction message type.</p>\n", "default_value": "&lt;MessageTypes.REACTION: 8&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.GROUP_UPDATE", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.GROUP_UPDATE", "kind": "variable", "doc": "<p>Group update message type.</p>\n", "default_value": "&lt;MessageTypes.GROUP_UPDATE: 9&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.SYNC", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.SYNC", "kind": "variable", "doc": "<p>Sync message type.</p>\n", "default_value": "&lt;MessageTypes.SYNC: 10&gt;"}, {"fullname": "SignalCliApi.signalCommon.MessageTypes.CALL", "modulename": "SignalCliApi.signalCommon", "qualname": "MessageTypes.CALL", "kind": "variable", "doc": "<p>Call message type.</p>\n", "default_value": "&lt;MessageTypes.CALL: 11&gt;"}, {"fullname": "SignalCliApi.signalCommon.RecipientTypes", "modulename": "SignalCliApi.signalCommon", "qualname": "RecipientTypes", "kind": "class", "doc": "<p>Enum to store message recipient types.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "SignalCliApi.signalCommon.RecipientTypes.GROUP", "modulename": "SignalCliApi.signalCommon", "qualname": "RecipientTypes.GROUP", "kind": "variable", "doc": "<p>Recipient is a Group.</p>\n", "default_value": "&lt;RecipientTypes.GROUP: 1&gt;"}, {"fullname": "SignalCliApi.signalCommon.RecipientTypes.CONTACT", "modulename": "SignalCliApi.signalCommon", "qualname": "RecipientTypes.CONTACT", "kind": "variable", "doc": "<p>Recipient is a Contact.</p>\n", "default_value": "&lt;RecipientTypes.CONTACT: 2&gt;"}, {"fullname": "SignalCliApi.signalCommon.ConversationTypes", "modulename": "SignalCliApi.signalCommon", "qualname": "ConversationTypes", "kind": "class", "doc": "<p>Enum to store conversation types.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "SignalCliApi.signalCommon.ConversationTypes.CONTACT", "modulename": "SignalCliApi.signalCommon", "qualname": "ConversationTypes.CONTACT", "kind": "variable", "doc": "<p>Conversation with a contact.</p>\n", "default_value": "&lt;ConversationTypes.CONTACT: 1&gt;"}, {"fullname": "SignalCliApi.signalCommon.ConversationTypes.GROUP", "modulename": "SignalCliApi.signalCommon", "qualname": "ConversationTypes.GROUP", "kind": "variable", "doc": "<p>Conversation with a group.</p>\n", "default_value": "&lt;ConversationTypes.GROUP: 2&gt;"}, {"fullname": "SignalCliApi.signalCommon.ReceiptTypes", "modulename": "SignalCliApi.signalCommon", "qualname": "ReceiptTypes", "kind": "class", "doc": "<p>Enum to store different receipt types:</p>\n", "bases": "enum.IntEnum"}, {"fullname": "SignalCliApi.signalCommon.ReceiptTypes.NOT_SET", "modulename": "SignalCliApi.signalCommon", "qualname": "ReceiptTypes.NOT_SET", "kind": "variable", "doc": "<p>Receipt type not set.</p>\n", "default_value": "&lt;ReceiptTypes.NOT_SET: 1&gt;"}, {"fullname": "SignalCliApi.signalCommon.ReceiptTypes.DELIVER", "modulename": "SignalCliApi.signalCommon", "qualname": "ReceiptTypes.DELIVER", "kind": "variable", "doc": "<p>Delivery receipt type.</p>\n", "default_value": "&lt;ReceiptTypes.DELIVER: 2&gt;"}, {"fullname": "SignalCliApi.signalCommon.ReceiptTypes.READ", "modulename": "SignalCliApi.signalCommon", "qualname": "ReceiptTypes.READ", "kind": "variable", "doc": "<p>Read message receipt type.</p>\n", "default_value": "&lt;ReceiptTypes.READ: 3&gt;"}, {"fullname": "SignalCliApi.signalCommon.ReceiptTypes.VIEWED", "modulename": "SignalCliApi.signalCommon", "qualname": "ReceiptTypes.VIEWED", "kind": "variable", "doc": "<p>Viewed message receipt type.</p>\n", "default_value": "&lt;ReceiptTypes.VIEWED: 4&gt;"}, {"fullname": "SignalCliApi.signalCommon.AttachmentTypes", "modulename": "SignalCliApi.signalCommon", "qualname": "AttachmentTypes", "kind": "class", "doc": "<p>Enum for attachment types:</p>\n", "bases": "enum.IntEnum"}, {"fullname": "SignalCliApi.signalCommon.AttachmentTypes.NOT_SET", "modulename": "SignalCliApi.signalCommon", "qualname": "AttachmentTypes.NOT_SET", "kind": "variable", "doc": "<p>Attachment type not set.</p>\n", "default_value": "&lt;AttachmentTypes.NOT_SET: 1&gt;"}, {"fullname": "SignalCliApi.signalCommon.AttachmentTypes.TEXT", "modulename": "SignalCliApi.signalCommon", "qualname": "AttachmentTypes.TEXT", "kind": "variable", "doc": "<p>Attachment is a TextAttachment.</p>\n", "default_value": "&lt;AttachmentTypes.TEXT: 2&gt;"}, {"fullname": "SignalCliApi.signalCommon.AttachmentTypes.FILE", "modulename": "SignalCliApi.signalCommon", "qualname": "AttachmentTypes.FILE", "kind": "variable", "doc": "<p>Attachment is an Attachment (file).</p>\n", "default_value": "&lt;AttachmentTypes.FILE: 3&gt;"}, {"fullname": "SignalCliApi.signalCommon.SyncTypes", "modulename": "SignalCliApi.signalCommon", "qualname": "SyncTypes", "kind": "class", "doc": "<p>Enum for different sync message types:</p>\n", "bases": "enum.IntEnum"}, {"fullname": "SignalCliApi.signalCommon.SyncTypes.NOT_SET", "modulename": "SignalCliApi.signalCommon", "qualname": "SyncTypes.NOT_SET", "kind": "variable", "doc": "<p>Sync type not set.</p>\n", "default_value": "&lt;SyncTypes.NOT_SET: 1&gt;"}, {"fullname": "SignalCliApi.signalCommon.SyncTypes.CONTACTS", "modulename": "SignalCliApi.signalCommon", "qualname": "SyncTypes.CONTACTS", "kind": "variable", "doc": "<p>Sync Contacts type.</p>\n", "default_value": "&lt;SyncTypes.CONTACTS: 2&gt;"}, {"fullname": "SignalCliApi.signalCommon.SyncTypes.GROUPS", "modulename": "SignalCliApi.signalCommon", "qualname": "SyncTypes.GROUPS", "kind": "variable", "doc": "<p>Sync Groups type.</p>\n", "default_value": "&lt;SyncTypes.GROUPS: 3&gt;"}, {"fullname": "SignalCliApi.signalCommon.SyncTypes.SENT_MESSAGES", "modulename": "SignalCliApi.signalCommon", "qualname": "SyncTypes.SENT_MESSAGES", "kind": "variable", "doc": "<p>Sync SentMessages type.</p>\n", "default_value": "&lt;SyncTypes.SENT_MESSAGES: 4&gt;"}, {"fullname": "SignalCliApi.signalCommon.SyncTypes.READ_MESSAGES", "modulename": "SignalCliApi.signalCommon", "qualname": "SyncTypes.READ_MESSAGES", "kind": "variable", "doc": "<p>Sync read messages type.</p>\n", "default_value": "&lt;SyncTypes.READ_MESSAGES: 5&gt;"}, {"fullname": "SignalCliApi.signalCommon.SyncTypes.BLOCKS", "modulename": "SignalCliApi.signalCommon", "qualname": "SyncTypes.BLOCKS", "kind": "variable", "doc": "<p>Sync blocked contacts or groups type.</p>\n", "default_value": "&lt;SyncTypes.BLOCKS: 6&gt;"}, {"fullname": "SignalCliApi.signalCommon.TypingStates", "modulename": "SignalCliApi.signalCommon", "qualname": "TypingStates", "kind": "class", "doc": "<p>Enum to represent the two different typing states.</p>\n", "bases": "enum.IntEnum"}, {"fullname": "SignalCliApi.signalCommon.TypingStates.NOT_SET", "modulename": "SignalCliApi.signalCommon", "qualname": "TypingStates.NOT_SET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TypingStates.NOT_SET: 1&gt;"}, {"fullname": "SignalCliApi.signalCommon.TypingStates.STARTED", "modulename": "SignalCliApi.signalCommon", "qualname": "TypingStates.STARTED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TypingStates.STARTED: 2&gt;"}, {"fullname": "SignalCliApi.signalCommon.TypingStates.STOPPED", "modulename": "SignalCliApi.signalCommon", "qualname": "TypingStates.STOPPED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;TypingStates.STOPPED: 3&gt;"}, {"fullname": "SignalCliApi.signalContact", "modulename": "SignalCliApi.signalContact", "kind": "module", "doc": "<p>File: signalContact.py\nStore and manage a single contact.</p>\n"}, {"fullname": "SignalCliApi.signalContact.Contact", "modulename": "SignalCliApi.signalContact", "qualname": "Contact", "kind": "class", "doc": "<p>Class to store a contact.</p>\n"}, {"fullname": "SignalCliApi.signalContact.Contact.__init__", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.__init__", "kind": "function", "doc": "<p>Initialize a Contact.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands with.</li>\n<li><strong>sync_socket: socket.socket</strong>:  The socket to run sync operations with.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>account_id: str</strong>:  This account's ID.</li>\n<li><strong>account_path: str</strong>:  The path to this accounts data directory.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  Load from a dict created by __to_dict__()</li>\n<li><strong>raw_contact: Optional[dict[str, Any]]</strong>:  Load from a dict provided by signal.</li>\n<li><strong>name: Optional[str]</strong>:  The name of this contact.</li>\n<li><strong>number: Optional[str]</strong>:  The phone number of this contact.</li>\n<li><strong>uuid: Optional[str]</strong>:  The UUID of the contact.</li>\n<li><strong>is_blocked: bool</strong>:  If this contact should be blocked.</li>\n<li><strong>expiration: Optional[int]</strong>:  The expiration of this contact in seconds.</li>\n<li><strong>color: Optional[str]</strong>:  The colour of this contact.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">sync_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_contact</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">uuid</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_blocked</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">expiration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalContact.Contact.name", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.name", "kind": "variable", "doc": "<p>The name of the contact.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalContact.Contact.number", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.number", "kind": "variable", "doc": "<p>The phone number of the contact.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalContact.Contact.uuid", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.uuid", "kind": "variable", "doc": "<p>The UUID of the contact.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalContact.Contact.profile", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.profile", "kind": "variable", "doc": "<p>The profile of the contact.</p>\n", "annotation": ": Optional[SignalCliApi.signalProfile.Profile]"}, {"fullname": "SignalCliApi.signalContact.Contact.devices", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.devices", "kind": "variable", "doc": "<p>The contacts device list.</p>\n", "annotation": ": Optional[SignalCliApi.signalDevices.Devices]"}, {"fullname": "SignalCliApi.signalContact.Contact.is_blocked", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.is_blocked", "kind": "variable", "doc": "<p>Is this contact blocked?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalContact.Contact.expiration", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.expiration", "kind": "variable", "doc": "<p>Expiration in seconds.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalContact.Contact.is_typing", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.is_typing", "kind": "variable", "doc": "<p>Is this contact typing?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalContact.Contact.last_typing_change", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.last_typing_change", "kind": "variable", "doc": "<p>The Timestamp of the last typing change.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalContact.Contact.last_seen", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.last_seen", "kind": "variable", "doc": "<p>The last time this contact was seen.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalContact.Contact.color", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.color", "kind": "variable", "doc": "<p>The colour of the contact.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalContact.Contact.is_self", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.is_self", "kind": "variable", "doc": "<p>Is this the self-contact?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalContact.Contact.get_id", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.get_id", "kind": "function", "doc": "<p>Get the id, preferring the phone number, otherwise the uuid of the contact.\n:returns: str: The number or uuid.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalContact.Contact.get_display_name", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.get_display_name", "kind": "function", "doc": "<p>Get a display version of the contact name.\n:returns: str: The display name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalContact.Contact.set_name", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.set_name", "kind": "function", "doc": "<p>Set the name of the contact.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: str</strong>:  The name to assign to the contact.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError if name not a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalContact.Contact.seen", "modulename": "SignalCliApi.signalContact", "qualname": "Contact.seen", "kind": "function", "doc": "<p>Update the last time this contact has been seen.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_seen: Timestamp</strong>:  The time this contact was seen at.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If time_seen is not a Timestamp object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_seen</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalContacts", "modulename": "SignalCliApi.signalContacts", "kind": "module", "doc": "<p>File: signalContacts.py\nManage the signal contacts.</p>\n"}, {"fullname": "SignalCliApi.signalContacts.Contacts", "modulename": "SignalCliApi.signalContacts", "qualname": "Contacts", "kind": "class", "doc": "<p>Object to contain a contact list.</p>\n"}, {"fullname": "SignalCliApi.signalContacts.Contacts.__init__", "modulename": "SignalCliApi.signalContacts", "qualname": "Contacts.__init__", "kind": "function", "doc": "<p>Initialize the contacts.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to use for commands.</li>\n<li><strong>sync_socket: socket.socket</strong>:  The socket to use for sync operations.</li>\n<li><strong>config_path: str</strong>:  The path to the signal-cli config directory.</li>\n<li><strong>account_id: str</strong>:  The account ID, Either the number or the uuid.</li>\n<li><strong>account_path: str</strong>:  The path to the account data directory.</li>\n<li><strong>do_load: bool</strong>:  Load contacts from disk.</li>\n<li><strong>do_sync: bool</strong>:  Load contact from signal, and merge with existing contacts.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">sync_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">do_sync</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "SignalCliApi.signalContacts.Contacts.get_by_number", "modulename": "SignalCliApi.signalContacts", "qualname": "Contacts.get_by_number", "kind": "function", "doc": "<p>Get a contact given a number.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>number: str</strong>:  The phone number of the contact.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[Contact]: Returns the contact, or None if not found.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If phone number is not a string.</li>\n<li>ValueError: If phone number is not in proper format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalContacts.Contacts.get_by_uuid", "modulename": "SignalCliApi.signalContacts", "qualname": "Contacts.get_by_uuid", "kind": "function", "doc": "<p>Get a contact given a UUID.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>uuid: str</strong>:  The uuid of the contact.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Return the contact, or None if not found.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If uuid is not a string.</li>\n<li>ValueError: If uuid is not in proper format.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uuid</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalContacts.Contacts.get_by_id", "modulename": "SignalCliApi.signalContacts", "qualname": "Contacts.get_by_id", "kind": "function", "doc": "<p>Get a contact given either a phone number or an uuid.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contact_id: str</strong>:  The id of the contact, either a phone number or an uuid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Return the contact, or None if not found.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If the contact_id is not a string.</li>\n<li>ValueError: If contact_id not in phone number or uuid formats.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">contact_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalContacts.Contacts.get_self", "modulename": "SignalCliApi.signalContacts", "qualname": "Contacts.get_self", "kind": "function", "doc": "<p>Return the contact for the current account.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The 'self' contact, or None if not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalContacts.Contacts.get_by_name", "modulename": "SignalCliApi.signalContacts", "qualname": "Contacts.get_by_name", "kind": "function", "doc": "<p>Get a contact given a name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: str</strong>:  The name to search for.\n:returns: Optional[Contact]: The contact, or None if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If name is not a string.</li>\n<li>ValueError: If name is an empty string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalContacts.Contacts.add", "modulename": "SignalCliApi.signalContacts", "qualname": "Contacts.add", "kind": "function", "doc": "<p>Add a contact.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: str</strong>:  The name to assign to the contact.</li>\n<li><strong>contact_id: str</strong>:  The id of the contact, either a phone number or an uuid.</li>\n<li><strong>expiration: Optional[int]</strong>:  The message expiration time in seconds.\n:returns: tuple(bool, Contact, Optional[str]): The first element, the bool indicates if the contact was\nsuccessfully added to signal.\nThe second element is the new Contact object, or existing Contact object if the contact already exists.\nThe third element, the Optional string, will be None if the first element is True, otherwise it will be a\nreason the contact wasn't added to signal.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If a parameter is of an invalid type.</li>\n<li>ValueError: If the contact id not in phone number or uuid formats.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contact_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">expiration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalDevice", "modulename": "SignalCliApi.signalDevice", "kind": "module", "doc": "<p>File: signalDevice.py\nStore and handle a single device.</p>\n"}, {"fullname": "SignalCliApi.signalDevice.Device", "modulename": "SignalCliApi.signalDevice", "qualname": "Device", "kind": "class", "doc": "<p>Class to store a device.</p>\n"}, {"fullname": "SignalCliApi.signalDevice.Device.__init__", "modulename": "SignalCliApi.signalDevice", "qualname": "Device.__init__", "kind": "function", "doc": "<p>Initialize a device:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sync_socket: socket.socket</strong>:  The socket to use for sync operations.</li>\n<li><strong>account_id: str</strong>:  This account ID.</li>\n<li><strong>this_device: Optional[int]</strong>:  The device ID of the device we're on.</li>\n<li><strong>raw_device: Optional[dict[str, Any]]</strong>:  Load this device from a raw device dict from signal.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  Load this device from a dict created by __to_dict__().</li>\n<li><strong>device_id: Optional[int]</strong>:  The device ID of this device.</li>\n<li><strong>name: Optional[str]</strong>:  The name of this device.</li>\n<li><strong>created: Optional[Timestamp]</strong>:  When this device was created.</li>\n<li><strong>last_seen: Optional[Timestamp]</strong>:  When this device was last seen.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  On invalid final device configuration.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sync_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_device</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">created</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last_seen</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalDevice.Device.id", "modulename": "SignalCliApi.signalDevice", "qualname": "Device.id", "kind": "variable", "doc": "<p>The device ID.</p>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalDevice.Device.name", "modulename": "SignalCliApi.signalDevice", "qualname": "Device.name", "kind": "variable", "doc": "<p>The name of the device.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalDevice.Device.created", "modulename": "SignalCliApi.signalDevice", "qualname": "Device.created", "kind": "variable", "doc": "<p>The Timestamp of when this device was created.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalDevice.Device.last_seen", "modulename": "SignalCliApi.signalDevice", "qualname": "Device.last_seen", "kind": "variable", "doc": "<p>The Timestamp of when this device was last seen.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalDevice.Device.is_this_device", "modulename": "SignalCliApi.signalDevice", "qualname": "Device.is_this_device", "kind": "variable", "doc": "<p>Is this device the device we're using?</p>\n", "annotation": ": Optional[bool]"}, {"fullname": "SignalCliApi.signalDevice.Device.is_primary_device", "modulename": "SignalCliApi.signalDevice", "qualname": "Device.is_primary_device", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[bool]"}, {"fullname": "SignalCliApi.signalDevice.Device.seen", "modulename": "SignalCliApi.signalDevice", "qualname": "Device.seen", "kind": "function", "doc": "<p>Update the last time this device has been seen.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_seen: Timestamp</strong>:  The time this device was seen at.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If time_seen not a Timestamp.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_seen</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalDevice.Device.get_display_name", "modulename": "SignalCliApi.signalDevice", "qualname": "Device.get_display_name", "kind": "function", "doc": "<p>Return a pretty name to display.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalDevices", "modulename": "SignalCliApi.signalDevices", "kind": "module", "doc": "<p>File: signalDevices.py\nHandle a list of Devices.</p>\n"}, {"fullname": "SignalCliApi.signalDevices.Devices", "modulename": "SignalCliApi.signalDevices", "qualname": "Devices", "kind": "class", "doc": "<p>An object containing the devices list.</p>\n"}, {"fullname": "SignalCliApi.signalDevices.Devices.__init__", "modulename": "SignalCliApi.signalDevices", "qualname": "Devices.__init__", "kind": "function", "doc": "<p>Initialize devices:</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sync_socket: socket.socket</strong>:  The socket to use for syncing.</li>\n<li><strong>account_id</strong>:  str, The account ID.</li>\n<li><strong>this_device: Optional[int]</strong>:  The device we're currently using.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  Load this device from the given dict created by __to_dict__()</li>\n<li><strong>do_sync: bool</strong>:  Sync the device info with signal, defaults to False</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sync_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">do_sync</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "SignalCliApi.signalDevices.Devices.get_this_device", "modulename": "SignalCliApi.signalDevices", "qualname": "Devices.get_this_device", "kind": "function", "doc": "<p>Get the device associated with the current account.\n:returns: Optional[Device]: Returns the device, or None if not found, which would happen for the devices of a\n                            contact.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalExceptions", "modulename": "SignalCliApi.signalExceptions", "kind": "module", "doc": "<p>File: signalExceptions.py\nCollection of Exceptions to throw.</p>\n"}, {"fullname": "SignalCliApi.signalExceptions.Error", "modulename": "SignalCliApi.signalExceptions", "qualname": "Error", "kind": "class", "doc": "<p>Base signal error</p>\n", "bases": "builtins.Exception"}, {"fullname": "SignalCliApi.signalExceptions.Error.__init__", "modulename": "SignalCliApi.signalExceptions", "qualname": "Error.__init__", "kind": "function", "doc": "<p>Base exception to throw when an error occurs.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message: str</strong>:  The error message.</li>\n<li><strong>error: Optional[Exception]</strong>:  The actual exception that was raised.</li>\n<li><strong>args: tuple[*Any]</strong>:  Additional arguments to store in the Exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"ne\">Exception</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SignalCliApi.signalExceptions.Error.message", "modulename": "SignalCliApi.signalExceptions", "qualname": "Error.message", "kind": "variable", "doc": "<p>The error message.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalExceptions.Error.error", "modulename": "SignalCliApi.signalExceptions", "qualname": "Error.error", "kind": "variable", "doc": "<p>The Exception that caused this error.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[Exception]: The Exception object.</p>\n</blockquote>\n", "annotation": ": Optional[Exception]"}, {"fullname": "SignalCliApi.signalExceptions.SignalError", "modulename": "SignalCliApi.signalExceptions", "qualname": "SignalError", "kind": "class", "doc": "<p>Exception to throw when signal returns an error code.</p>\n", "bases": "Error"}, {"fullname": "SignalCliApi.signalExceptions.SignalError.__init__", "modulename": "SignalCliApi.signalExceptions", "qualname": "SignalError.__init__", "kind": "function", "doc": "<p>Initialize a SignalError</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message</strong>:  The signal error message.</li>\n<li><strong>code</strong>:  The signal error code.</li>\n<li><strong>args: tuple[*Any]</strong>:  Any additional arguments to the Exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SignalCliApi.signalExceptions.SignalError.code", "modulename": "SignalCliApi.signalExceptions", "qualname": "SignalError.code", "kind": "variable", "doc": "<p>The signal error code.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The error code.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalExceptions.ParameterError", "modulename": "SignalCliApi.signalExceptions", "qualname": "ParameterError", "kind": "class", "doc": "<p>Exception to throw when parameters conflict.</p>\n", "bases": "Error"}, {"fullname": "SignalCliApi.signalExceptions.ParameterError.__init__", "modulename": "SignalCliApi.signalExceptions", "qualname": "ParameterError.__init__", "kind": "function", "doc": "<p>Initialize a ParameterError.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message: str</strong>:  The error message.</li>\n<li><strong>args: tuple[*Any]</strong>:  Any additional arguments to the Exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SignalCliApi.signalExceptions.InvalidServerResponse", "modulename": "SignalCliApi.signalExceptions", "qualname": "InvalidServerResponse", "kind": "class", "doc": "<p>signal-cli provided us with invalid JSON.</p>\n", "bases": "Error"}, {"fullname": "SignalCliApi.signalExceptions.InvalidServerResponse.__init__", "modulename": "SignalCliApi.signalExceptions", "qualname": "InvalidServerResponse.__init__", "kind": "function", "doc": "<p>Initialise InvalidServerResponse error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message: str</strong>:  The error message.</li>\n<li><strong>traceback: str</strong>:  The JSON error traceback.</li>\n<li><strong>json_msg: str</strong>:  The JSON error message.</li>\n<li><strong>args: tuple[Any, ...]</strong>:  Additional arguments to store in the Exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">JSONDecodeError</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SignalCliApi.signalExceptions.InvalidServerResponse.json_msg", "modulename": "SignalCliApi.signalExceptions", "qualname": "InvalidServerResponse.json_msg", "kind": "variable", "doc": "<p>The JSON message describing the JSON encoding error.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[str] The error message if available.</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalExceptions.CommunicationsError", "modulename": "SignalCliApi.signalExceptions", "qualname": "CommunicationsError", "kind": "class", "doc": "<p>An error occurred during socket communications.</p>\n", "bases": "Error"}, {"fullname": "SignalCliApi.signalExceptions.CommunicationsError.__init__", "modulename": "SignalCliApi.signalExceptions", "qualname": "CommunicationsError.__init__", "kind": "function", "doc": "<p>Initialize CommunicationsError.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message: str</strong>:  The error message.</li>\n<li><strong>error: socket.error</strong>:  The socket error that caused the error.</li>\n<li><strong>args: tuple[Any]</strong>:  Any additional arguments to add to the Exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"ne\">OSError</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SignalCliApi.signalExceptions.InvalidDataFile", "modulename": "SignalCliApi.signalExceptions", "qualname": "InvalidDataFile", "kind": "class", "doc": "<p>Exception to throw when an error occurs while loading a signal-cli data file.</p>\n", "bases": "Error"}, {"fullname": "SignalCliApi.signalExceptions.InvalidDataFile.__init__", "modulename": "SignalCliApi.signalExceptions", "qualname": "InvalidDataFile.__init__", "kind": "function", "doc": "<p>Initialize an InvalidDataFile Error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message: str</strong>:  The error message.</li>\n<li><strong>error: JSONDecodeError | KeyError</strong>:  The exception that caused the error.</li>\n<li><strong>file_path</strong>:  The full path to the offending file.</li>\n<li><strong>args: tuple[Any]</strong>:  Any additional arguments to store in the exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">error</span><span class=\"p\">:</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">decoder</span><span class=\"o\">.</span><span class=\"n\">JSONDecodeError</span> <span class=\"o\">|</span> <span class=\"ne\">KeyError</span>,</span><span class=\"param\">\t<span class=\"n\">file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SignalCliApi.signalExceptions.InvalidDataFile.file_path", "modulename": "SignalCliApi.signalExceptions", "qualname": "InvalidDataFile.file_path", "kind": "variable", "doc": "<p>The full path to the offending file.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: The file path.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalExceptions.InvalidDataFile.json_msg", "modulename": "SignalCliApi.signalExceptions", "qualname": "InvalidDataFile.json_msg", "kind": "variable", "doc": "<p>The JSON decoding error message, if available, otherwise None.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[str]: The JSON decoding error message, or None.</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalExceptions.UnsupportedVersion", "modulename": "SignalCliApi.signalExceptions", "qualname": "UnsupportedVersion", "kind": "class", "doc": "<p>Exception to throw when encountering an unsupported version.</p>\n", "bases": "Error"}, {"fullname": "SignalCliApi.signalExceptions.UnsupportedVersion.__init__", "modulename": "SignalCliApi.signalExceptions", "qualname": "UnsupportedVersion.__init__", "kind": "function", "doc": "<p>Initialize an UnsupportedVersion error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message: str</strong>:  The error message.</li>\n<li><strong>version: int</strong>:  The version causing the issue.</li>\n<li><strong>supported_versions: tuple[*int]</strong>:  The supported versions of the library.</li>\n<li><strong>args: tuple[*Any]</strong>:  Any additional arguments to store in the Exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">version</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">supported_versions</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SignalCliApi.signalExceptions.UnsupportedVersion.version", "modulename": "SignalCliApi.signalExceptions", "qualname": "UnsupportedVersion.version", "kind": "variable", "doc": "<p>The version that is unsupported.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The version number.</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalExceptions.UnsupportedVersion.supported_versions", "modulename": "SignalCliApi.signalExceptions", "qualname": "UnsupportedVersion.supported_versions", "kind": "variable", "doc": "<p>The versions supported by the library.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple[*int]: The supported versions.</p>\n</blockquote>\n", "annotation": ": tuple"}, {"fullname": "SignalCliApi.signalExceptions.LinkInProgress", "modulename": "SignalCliApi.signalExceptions", "qualname": "LinkInProgress", "kind": "class", "doc": "<p>Exception to throw when start_link is called twice in a row.</p>\n", "bases": "Error"}, {"fullname": "SignalCliApi.signalExceptions.LinkInProgress.__init__", "modulename": "SignalCliApi.signalExceptions", "qualname": "LinkInProgress.__init__", "kind": "function", "doc": "<p>Initialize LinkInProgress error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args: tuple[*Any]</strong>:  Any additional arguments to store in the Exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SignalCliApi.signalExceptions.LinkNotStarted", "modulename": "SignalCliApi.signalExceptions", "qualname": "LinkNotStarted", "kind": "class", "doc": "<p>Exception to throw when the link hasn't been started yet and finish_link is called.</p>\n", "bases": "Error"}, {"fullname": "SignalCliApi.signalExceptions.LinkNotStarted.__init__", "modulename": "SignalCliApi.signalExceptions", "qualname": "LinkNotStarted.__init__", "kind": "function", "doc": "<p>Initialize a LinkNotStarted error.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args: tuple[*Any]</strong>:  Any additional arguments to store in the exception.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span>)</span>"}, {"fullname": "SignalCliApi.signalGroup", "modulename": "SignalCliApi.signalGroup", "kind": "module", "doc": "<p>File: signalGroup.py\nManage and maintain a single group.</p>\n"}, {"fullname": "SignalCliApi.signalGroup.Group", "modulename": "SignalCliApi.signalGroup", "qualname": "Group", "kind": "class", "doc": "<p>An object containing a single group.</p>\n"}, {"fullname": "SignalCliApi.signalGroup.Group.__init__", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.__init__", "kind": "function", "doc": "<p>Initialize a Group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sync_socket: socket.socket</strong>:  The socket to run sync commands on.</li>\n<li><strong>config_path: str</strong>:  The path to the signal-cli config directory.</li>\n<li><strong>account_id: str</strong>:  This account ID.</li>\n<li><strong>account_contacts</strong>:  The account's Contacts object.</li>\n<li><strong>from_dict: dict[str, Any]</strong>:  Load from a dict provided by __to_dict__()</li>\n<li><strong>raw_group: dict[str, Any]</strong>:  Load from a dict provided by signal.</li>\n<li><strong>group_id: Optional[str]</strong>:  The group ID.</li>\n<li><strong>name: Optional[str]</strong>:  The group name.</li>\n<li><strong>description: Optional[str]</strong>:  The group description.</li>\n<li><strong>is_blocked: bool</strong>:  If this group is blocked.</li>\n<li><strong>is_member: bool</strong>:  If this account is a member of the group.</li>\n<li><strong>expiration: Optional[int]</strong>:  The expiration time of the group.</li>\n<li><strong>link: Optional[str]</strong>:  The join link of the group.</li>\n<li><strong>members: list[Contact]</strong>:  Existing members.</li>\n<li><strong>pending_members: list[Contact]</strong>:  Pending members.</li>\n<li><strong>requesting_members</strong>:  list[Contact] Requesting members.</li>\n<li><strong>admins: list[Contact]</strong>:  Admin members.</li>\n<li><strong>banned: list[Contact]</strong>:  Banned members.</li>\n<li><strong>permission_add_member: Optional[str]</strong>:  Add member permissions.</li>\n<li><strong>permission_edit_details: Optional[str]</strong>:  Edit details permissions.</li>\n<li><strong>permission_send_message: Optional[str]</strong>:  Permission to send messages.</li>\n<li><strong>last_seen: Optional[Timestamp]</strong>:  The time this group was last seen.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sync_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_group</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_id</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_blocked</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">is_member</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">expiration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">link</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">members</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">pending_members</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">requesting_members</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">admins</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">banned</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">permission_add_member</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">permission_edit_details</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">permission_send_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">last_seen</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalGroup.Group.id", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.id", "kind": "variable", "doc": "<p>The group ID.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalGroup.Group.name", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.name", "kind": "variable", "doc": "<p>The name of the group.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalGroup.Group.description", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.description", "kind": "variable", "doc": "<p>The description of the group.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalGroup.Group.is_blocked", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.is_blocked", "kind": "variable", "doc": "<p>Is this group blocked?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalGroup.Group.is_member", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.is_member", "kind": "variable", "doc": "<p>Is this account a member of the group?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalGroup.Group.expiration", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.expiration", "kind": "variable", "doc": "<p>The expiration time of this group in seconds.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalGroup.Group.link", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.link", "kind": "variable", "doc": "<p>The join link of this group.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalGroup.Group.members", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.members", "kind": "variable", "doc": "<p>The current members of this group.</p>\n", "annotation": ": list[SignalCliApi.signalContact.Contact]"}, {"fullname": "SignalCliApi.signalGroup.Group.pending", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.pending", "kind": "variable", "doc": "<p>The pending members of this group.</p>\n", "annotation": ": list[SignalCliApi.signalContact.Contact]"}, {"fullname": "SignalCliApi.signalGroup.Group.requesting", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.requesting", "kind": "variable", "doc": "<p>The requesting members of the group.</p>\n", "annotation": ": list[SignalCliApi.signalContact.Contact]"}, {"fullname": "SignalCliApi.signalGroup.Group.admins", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.admins", "kind": "variable", "doc": "<p>The admins of the group.</p>\n", "annotation": ": list[SignalCliApi.signalContact.Contact]"}, {"fullname": "SignalCliApi.signalGroup.Group.banned", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.banned", "kind": "variable", "doc": "<p>The banned members of the group.</p>\n", "annotation": ": list[SignalCliApi.signalContact.Contact]"}, {"fullname": "SignalCliApi.signalGroup.Group.permission_add_member", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.permission_add_member", "kind": "variable", "doc": "<p>The permissions to add a member.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalGroup.Group.permission_edit_details", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.permission_edit_details", "kind": "variable", "doc": "<p>The permission to edit group details.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalGroup.Group.permission_send_message", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.permission_send_message", "kind": "variable", "doc": "<p>The permissions to send a message to the group.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalGroup.Group.last_seen", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.last_seen", "kind": "variable", "doc": "<p>The date / time this was last seen.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalGroup.Group.get_id", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.get_id", "kind": "function", "doc": "<p>Return the group id.\n:returns: str: The group id.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalGroup.Group.get_display_name", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.get_display_name", "kind": "function", "doc": "<p>Get the display name, optionally truncating it to a number of characters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>max_len: Optional[int]</strong>:  The number of characters to return.\n:returns str: The display name.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If max_len is not an int.</li>\n<li>ValueError: if max_len is less than 1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">max_len</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalGroup.Group.seen", "modulename": "SignalCliApi.signalGroup", "qualname": "Group.seen", "kind": "function", "doc": "<p>Update the last time this contact has been seen.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>time_seen: Timestamp</strong>:  The time this contact was seen at.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If time_seen is not a Timestamp object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_seen</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalGroupUpdate", "modulename": "SignalCliApi.signalGroupUpdate", "kind": "module", "doc": "<p>File: signalGroupUpdate.py\nStore and handle a group update message.</p>\n"}, {"fullname": "SignalCliApi.signalGroupUpdate.GroupUpdate", "modulename": "SignalCliApi.signalGroupUpdate", "qualname": "GroupUpdate", "kind": "class", "doc": "<p>Class for a group update message.</p>\n", "bases": "SignalCliApi.signalMessage.Message"}, {"fullname": "SignalCliApi.signalGroupUpdate.GroupUpdate.__init__", "modulename": "SignalCliApi.signalGroupUpdate", "qualname": "GroupUpdate.__init__", "kind": "function", "doc": "<p>Initialize a message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to preform command operations with</li>\n<li><strong>account_id: str</strong>:  This account ID.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts Devices object.</li>\n<li><strong>this_device: Device</strong>:  The device object for this device.</li>\n<li><strong>from_dict: Optional[dict] = None</strong>:  Load from a dict provided by __to_dict__()</li>\n<li><strong>raw_message: Optional[dict] = None</strong>:  Load from a dict provided by signal.</li>\n<li><strong>sender: Optional[Contact] = None</strong>:  The sender Contact of this message.</li>\n<li><strong>recipient: Optional[Contact | Group] = None</strong>:  The recipient Contact | Group of this message.</li>\n<li><strong>device: Optional[Device] = None</strong>:  The device this message was sent from.</li>\n<li><strong>timestamp: Optional[Timestamp] = None</strong>:  The timestamp object of this message.</li>\n<li><strong>message_type: int = TYPE_NOT_SET</strong>:  The type of message this is.\n:returns: None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalGroupUpdate.GroupUpdate.body", "modulename": "SignalCliApi.signalGroupUpdate", "qualname": "GroupUpdate.body", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalGroups", "modulename": "SignalCliApi.signalGroups", "kind": "module", "doc": "<p>File: signalGroups.py\nContain and manage a list of groups.</p>\n"}, {"fullname": "SignalCliApi.signalGroups.Groups", "modulename": "SignalCliApi.signalGroups", "qualname": "Groups", "kind": "class", "doc": "<p>Object containing all the groups acting like a list.</p>\n"}, {"fullname": "SignalCliApi.signalGroups.Groups.__init__", "modulename": "SignalCliApi.signalGroups", "qualname": "Groups.__init__", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sync_socket: socket.socket</strong>:  The socket to run sync commands on.</li>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>config_path: str</strong>:  The path to the signal-cli config directory.</li>\n<li><strong>account_id: str</strong>:  This account ID.</li>\n<li><strong>account_contacts: Contacts</strong>:  The account's Contacts object.</li>\n<li><strong>from_dict: dict[str, Any]</strong>:  Load the groups from a dict created by __to_dict__().</li>\n<li><strong>do_sync: bool</strong>:  Sync data with signal; Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sync_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">do_sync</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "SignalCliApi.signalGroups.Groups.get_by_id", "modulename": "SignalCliApi.signalGroups", "qualname": "Groups.get_by_id", "kind": "function", "doc": "<p>Get a group by id.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group_id: str</strong>:  The id to search for.\n:returns: Optional[group]: The group, or None if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If group_id is not a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">group_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalGroups.Groups.get_by_name", "modulename": "SignalCliApi.signalGroups", "qualname": "Groups.get_by_name", "kind": "function", "doc": "<p>Get a group given a name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name: str</strong>:  The name of the group to search for.\n:returns: Optional[group]: The group, or None if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If name is not a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMention", "modulename": "SignalCliApi.signalMention", "kind": "module", "doc": "<p>File: signalMention.py\nClass to store and handle a mention.</p>\n"}, {"fullname": "SignalCliApi.signalMention.Mention", "modulename": "SignalCliApi.signalMention", "qualname": "Mention", "kind": "class", "doc": "<p>Object for a mention.</p>\n"}, {"fullname": "SignalCliApi.signalMention.Mention.__init__", "modulename": "SignalCliApi.signalMention", "qualname": "Mention.__init__", "kind": "function", "doc": "<p>Initialize a new mention.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contacts</strong>:  Contacts, The accounts contacts object.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  Load from a dict provided by __to_dict__()</li>\n<li><strong>raw_mention: Optional[dict[str, Any]]</strong>:  Load from a dict provided by signal.</li>\n<li><strong>contact: Optional[Contact]</strong>:  The contact this mention refers to.</li>\n<li><strong>start: Optional[int]</strong>:  Where in the body the mention starts.</li>\n<li><strong>length: Optional[int]</strong>:  How long the mention is.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_mention</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">contact</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalMention.Mention.contact", "modulename": "SignalCliApi.signalMention", "qualname": "Mention.contact", "kind": "variable", "doc": "<p>The contact this mention refers to.</p>\n", "annotation": ": SignalCliApi.signalContact.Contact"}, {"fullname": "SignalCliApi.signalMention.Mention.start", "modulename": "SignalCliApi.signalMention", "qualname": "Mention.start", "kind": "variable", "doc": "<p>The start position in the body where this mention starts.</p>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalMention.Mention.length", "modulename": "SignalCliApi.signalMention", "qualname": "Mention.length", "kind": "variable", "doc": "<p>The length of the mention.</p>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalMentions", "modulename": "SignalCliApi.signalMentions", "kind": "module", "doc": "<p>File signalMentions.py\nStore and handle a list of mentions.</p>\n"}, {"fullname": "SignalCliApi.signalMentions.Mentions", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions", "kind": "class", "doc": "<p>Object to store the mentions in the message.</p>\n"}, {"fullname": "SignalCliApi.signalMentions.Mentions.__init__", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.__init__", "kind": "function", "doc": "<p>Initialize the Mentions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contacts: Contacts</strong>:  This accounts contacts object.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  Load from a dict provided by __to_dict__()</li>\n<li><strong>raw_mentions: Optional[dict[str, Any]]</strong>:  Load from a dict provided by signal.</li>\n<li><strong>mentions: Optional[Iterable[Mention]]</strong>:  Any mentions to load.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_mentions</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mentions</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalMentions.Mentions.get_by_contact", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.get_by_contact", "kind": "function", "doc": "<p>Get a list of mentions given a contact.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contact: Contact</strong>:  The contact to find.\n:returns: list: A list of mentions, if none found an empty list is returned.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError if contact is not a Contact.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">contact</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMentions.Mentions.get_by_start_pos", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.get_by_start_pos", "kind": "function", "doc": "<p>Get a mention given a start position.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>start</strong>:  int, The start position.\n:returns: list[Mention]: A list of mentions or an empty list if none found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If start is not an int.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMentions.Mentions.get_by_length", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.get_by_length", "kind": "function", "doc": "<p>Get a list of mentions that are of a certain length.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>length: int</strong>:  The length to search for.\n:returns: List of mentions, an empty list if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError if length is not an int.</li>\n<li>ValueError if length is &lt; 1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMentions.Mentions.contact_mentioned", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.contact_mentioned", "kind": "function", "doc": "<p>Return True if a contact is mentioned.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contact: Contact</strong>:  The contact to search for.\n:returns: bool: True if contact is mentioned.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError if contact is not a Contact object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">contact</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMentions.Mentions.get_conflicting_mention", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.get_conflicting_mention", "kind": "function", "doc": "<p>Get the first existing mention that conflicts with the given mention.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mention: Mention</strong>:  The mention to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Optional[Mention]: The first conflicting Mention, None if no conflict.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  if mention is not a Mention object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mention</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMentions.Mentions.mention_conflicts", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.mention_conflicts", "kind": "function", "doc": "<p>Return True if an existing mention conflicts with a given mention.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mention: Mention</strong>:  The Mention to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: True there is a conflict, False there is no conflict.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If mention is not a Mention object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mention</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMentions.Mentions.append", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.append", "kind": "function", "doc": "<p>Append a mention to the mention list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mention: Mention</strong>:  The mention to append.\n:returns: None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If the mention is not a Mention object.</li>\n<li>RuntimeError: If the mention is already in the mention list, or conflicts with an existing mention.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">mention</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMentions.Mentions.create", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.create", "kind": "function", "doc": "<p>Create and append a mention to the list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>contact: Contact</strong>:  The contact to mention.</li>\n<li><strong>start: int</strong>:  The start position of the mention.</li>\n<li><strong>length: int</strong>:  The length of the mention.\n:returns: Mention: The mention created.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If contact is not a Contact object, start is not an int, or length is not an int.</li>\n<li><strong>RuntimeError</strong>:  If the created mention conflicts with a mention in the existing mentions.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">contact</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMentions.Mentions.create_from_body", "modulename": "SignalCliApi.signalMentions", "qualname": "Mentions.create_from_body", "kind": "function", "doc": "<p>Create a mention from the body of the message. Searches for the '@' sign followed by either the phone number,\n    the uuid of the contact, or the contact name surrounded in either single or double quotes.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>body: str</strong>:  The body to create the mentions from.\n:returns: list[Mention]: A list of the mentions in the body, an empty list if none found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If body is not a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessage", "modulename": "SignalCliApi.signalMessage", "kind": "module", "doc": "<p>File: signalMessage.py\nStore and handle a base message.</p>\n"}, {"fullname": "SignalCliApi.signalMessage.Message", "modulename": "SignalCliApi.signalMessage", "qualname": "Message", "kind": "class", "doc": "<p>Base class for a message.</p>\n"}, {"fullname": "SignalCliApi.signalMessage.Message.__init__", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.__init__", "kind": "function", "doc": "<p>Initialize a message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to preform command operations with</li>\n<li><strong>account_id: str</strong>:  This account ID.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts Devices object.</li>\n<li><strong>this_device: Device</strong>:  The device object for this device.</li>\n<li><strong>from_dict: Optional[dict] = None</strong>:  Load from a dict provided by __to_dict__()</li>\n<li><strong>raw_message: Optional[dict] = None</strong>:  Load from a dict provided by signal.</li>\n<li><strong>sender: Optional[Contact] = None</strong>:  The sender Contact of this message.</li>\n<li><strong>recipient: Optional[Contact | Group] = None</strong>:  The recipient Contact | Group of this message.</li>\n<li><strong>device: Optional[Device] = None</strong>:  The device this message was sent from.</li>\n<li><strong>timestamp: Optional[Timestamp] = None</strong>:  The timestamp object of this message.</li>\n<li><strong>message_type: int = TYPE_NOT_SET</strong>:  The type of message this is.\n:returns: None</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recipient</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">message_type</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalCommon</span><span class=\"o\">.</span><span class=\"n\">MessageTypes</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">MessageTypes</span><span class=\"o\">.</span><span class=\"n\">NOT_SET</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "SignalCliApi.signalMessage.Message.sender", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.sender", "kind": "variable", "doc": "<p>The sender of the message.</p>\n", "annotation": ": SignalCliApi.signalContact.Contact"}, {"fullname": "SignalCliApi.signalMessage.Message.recipient", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.recipient", "kind": "variable", "doc": "<p>The recipient of the message.</p>\n", "annotation": ": SignalCliApi.signalContact.Contact | SignalCliApi.signalGroup.Group"}, {"fullname": "SignalCliApi.signalMessage.Message.recipient_type", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.recipient_type", "kind": "variable", "doc": "<p>The recipient type of the message, either 'contact' or 'group'.</p>\n", "annotation": ": Optional[SignalCliApi.signalCommon.RecipientTypes]"}, {"fullname": "SignalCliApi.signalMessage.Message.device", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.device", "kind": "variable", "doc": "<p>The device the message was sent from.</p>\n", "annotation": ": SignalCliApi.signalDevice.Device"}, {"fullname": "SignalCliApi.signalMessage.Message.timestamp", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.timestamp", "kind": "variable", "doc": "<p>The timestamp object for this message.</p>\n", "annotation": ": SignalCliApi.signalTimestamp.Timestamp"}, {"fullname": "SignalCliApi.signalMessage.Message.message_type", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.message_type", "kind": "variable", "doc": "<p>The message type.</p>\n", "annotation": ": SignalCliApi.signalCommon.MessageTypes"}, {"fullname": "SignalCliApi.signalMessage.Message.is_delivered", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.is_delivered", "kind": "variable", "doc": "<p>Is this message delivered?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalMessage.Message.time_delivered", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.time_delivered", "kind": "variable", "doc": "<p>Timestamp of when this message was delivered.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalMessage.Message.is_read", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.is_read", "kind": "variable", "doc": "<p>Is this message read?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalMessage.Message.time_read", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.time_read", "kind": "variable", "doc": "<p>Timestamp of when this message was read.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalMessage.Message.is_viewed", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.is_viewed", "kind": "variable", "doc": "<p>Is this message viewed?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalMessage.Message.time_viewed", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.time_viewed", "kind": "variable", "doc": "<p>Timestamp of when this message was viewed.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalMessage.Message.mark_delivered", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.mark_delivered", "kind": "function", "doc": "<p>Mark a message as delivered.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>when: Optional[Timestamp]</strong>:  The time delivered, if None, NOW is used.\n:returns: None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If when is not a Timestamp.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">when</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessage.Message.mark_read", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.mark_read", "kind": "function", "doc": "<p>Mark a message as read.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>when: Optional[Timestamp]</strong>:  The time read, if None, NOW is used.\n:returns: None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If when is not a Timestamp.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">when</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessage.Message.mark_viewed", "modulename": "SignalCliApi.signalMessage", "qualname": "Message.mark_viewed", "kind": "function", "doc": "<p>Mark a message as viewed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>when: Optional[Timestamp]</strong>:  The time viewed, if None, NOW is used.\n:returns: None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError if when is not a Timestamp.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">when</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessages", "modulename": "SignalCliApi.signalMessages", "kind": "module", "doc": "<p>File: signalMessages.py\nStore and handle message lists.</p>\n"}, {"fullname": "SignalCliApi.signalMessages.Messages", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages", "kind": "class", "doc": "<p>Class to hold all messages, and act like a list.</p>\n"}, {"fullname": "SignalCliApi.signalMessages.Messages.__init__", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.__init__", "kind": "function", "doc": "<p>Initialize the messages object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>account_id: str</strong>:  This account's ID.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts Groups object.</li>\n<li><strong>devices: Devices</strong>:  This account Devices object.</li>\n<li><strong>account_path: str</strong>:  The full path to the account data directory.</li>\n<li><strong>this_device: Device</strong>:  This device, Device object.</li>\n<li><strong>sticker_packs: StickerPacks</strong>:  The loaded StickerPacks object.</li>\n<li><strong>do_load: bool</strong>:  True, load from disk, False, do not.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">account_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">sticker_packs</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">StickerPacks</span>,</span><span class=\"param\">\t<span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "SignalCliApi.signalMessages.Messages.messages", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.messages", "kind": "variable", "doc": "<p>List of sent / received messages.</p>\n", "annotation": ": list[SignalCliApi.signalSentMessage.SentMessage | SignalCliApi.signalReceivedMessage.ReceivedMessage]"}, {"fullname": "SignalCliApi.signalMessages.Messages.sync", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.sync", "kind": "variable", "doc": "<p>List of sync messages.</p>\n", "annotation": ": list[SignalCliApi.signalGroupUpdate.GroupUpdate | SignalCliApi.signalSyncMessage.SyncMessage]"}, {"fullname": "SignalCliApi.signalMessages.Messages.typing", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.typing", "kind": "variable", "doc": "<p>List of typing messages.</p>\n", "annotation": ": list[SignalCliApi.signalTypingMessage.TypingMessage]"}, {"fullname": "SignalCliApi.signalMessages.Messages.story", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.story", "kind": "variable", "doc": "<p>List of story messages.</p>\n", "annotation": ": list[SignalCliApi.signalStoryMessage.StoryMessage]"}, {"fullname": "SignalCliApi.signalMessages.Messages.sending", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.sending", "kind": "variable", "doc": "<p>Return sending status.\n:returns: bool: Sending status. True if sending, False if not.</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalMessages.Messages.get_by_timestamp", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.get_by_timestamp", "kind": "function", "doc": "<p>Get messages by timestamp.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>timestamp: Timestamp</strong>:  The timestamp to search for.\n:returns: list[SentMessage|ReceivedMessage]: The list of messages, or an empty list if none found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If timestamp is not a Timestamp object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMessage</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessages.Messages.get_by_recipient", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.get_by_recipient", "kind": "function", "doc": "<p>Get messages given a recipient.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recipient: Group | Contact</strong>:  The recipient to search for.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If recipient is not a Contact or a Group object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">recipient</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMessage</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessages.Messages.get_by_sender", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.get_by_sender", "kind": "function", "doc": "<p>Get messages given a sender.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sender: Contact</strong>:  The sender to search for.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError if sender is not a Contact object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMessage</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessages.Messages.get_conversation", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.get_conversation", "kind": "function", "doc": "<p>Get a conversation, given a target contact or group.  Returns a list of messages either sent to or received\n    from a contact or group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target: Contact | Group</strong>:  The contact or group to search for.\n:returns: list[SentMessage|ReceivedMessage]: The conversation, or an empty list if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If target is not a Contact or Group object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">target</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMessage</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessages.Messages.find", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.find", "kind": "function", "doc": "<p>Get a message, given an author, a timestamp, and a conversation.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>author: Contact</strong>:  The author of the message we're looking for.</li>\n<li><strong>timestamp: Timestamp</strong>:  The time stamp of the message we're looking for.</li>\n<li><strong>conversation: Contact | Group: The conversation the message is in; IE</strong>:  The conversation between self and\na specified Contact or Group.\n:returns: SentMessage | ReceivedMessage: The message found, or None if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If author is not a Contact object, if timestamp is not a Timestamp object, or if\nconversation is not a Contact or Group object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">author</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span>,</span><span class=\"param\">\t<span class=\"n\">conversation</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSentMessage</span><span class=\"o\">.</span><span class=\"n\">SentMessage</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReceivedMessage</span><span class=\"o\">.</span><span class=\"n\">ReceivedMessage</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMessage</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessages.Messages.get_quoted", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.get_quoted", "kind": "function", "doc": "<p>Get a message that contains a given Quote.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>quote: Quote</strong>:  The quote we're looking for.\n:returns: SentMessage | ReceivedMessage: The message that contains the quote, or None if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If quote is not a Quote object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">quote</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalQuote</span><span class=\"o\">.</span><span class=\"n\">Quote</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSentMessage</span><span class=\"o\">.</span><span class=\"n\">SentMessage</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReceivedMessage</span><span class=\"o\">.</span><span class=\"n\">ReceivedMessage</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMessage</span><span class=\"o\">.</span><span class=\"n\">Message</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessages.Messages.get_sent", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.get_sent", "kind": "function", "doc": "<p>Returns all messages that are SentMessage objects.\n:returns: list[SentMessage]: All the sent messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSentMessage</span><span class=\"o\">.</span><span class=\"n\">SentMessage</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessages.Messages.append", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.append", "kind": "function", "doc": "<p>Append a message to the appropriate message list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>message: Message</strong>:  The message to append.\n:returns: None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If 'message' is not a Message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMessage</span><span class=\"o\">.</span><span class=\"n\">Message</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalMessages.Messages.send_message", "modulename": "SignalCliApi.signalMessages", "qualname": "Messages.send_message", "kind": "function", "doc": "<p>Send a message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>recipients: Iterable[Contact | Group] | Contact | Group</strong>:  The recipients of the message.</li>\n<li><strong>body: Optional[str]</strong>:  The body of the message.</li>\n<li><strong>attachments: Optional[Iterable[Attachment | str] | Attachment | str ]</strong>:  Attachments to the message.</li>\n<li><strong>mentions: Optional[Iterable[Mention] | Mentions | Mention]</strong>:  Mentions in the message.</li>\n<li><strong>quote: Optional[Quote]</strong>:  A Quote object for the message.</li>\n<li><strong>sticker: Optional[Sticker]</strong>:  A sticker to send.</li>\n<li><strong>preview: Optional[Preview]</strong>:  A preview for the url in the message, url must appear in the body of the\nmessage.\n:returns: tuple[tuple[bool, Contact | Group, str | SentMessage]]: A tuple of tuples, the outer tuple is one\nelement per message sent.\nThe inner tuple's first element, a bool, is True or False for if the message was sent successfully or not.\nThe second element of the inner tuple is the Contact | Group the message was sent to.\nThe third element of the inner tuple, a str | SentMessage, is either a string containing an error message\nwhen sending fails, or the SentMessage object on sending success.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If a recipient is not a Contact or Group object, if body is not a string, if attachments is\nnot an Attachment object or a string, or a list of Attachment objects, or strings, if mentions is not a\nlist of Mention objects, or not a Mentions object, if quote is not a Quote object, if sticker is not a\nSticker object, or if preview is not a Preview object.</li>\n<li>ValueError: If body is an empty string, if attachments is an empty list, or if mentions is an empty\nlist.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">recipients</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attachments</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mentions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMentions</span><span class=\"o\">.</span><span class=\"n\">Mentions</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">quote</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalQuote</span><span class=\"o\">.</span><span class=\"n\">Quote</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sticker</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">Sticker</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">preview</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalPreview</span><span class=\"o\">.</span><span class=\"n\">Preview</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSentMessage</span><span class=\"o\">.</span><span class=\"n\">SentMessage</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalPreview", "modulename": "SignalCliApi.signalPreview", "kind": "module", "doc": "<p>File: signalPreview.py\nStore and handle a preview.</p>\n"}, {"fullname": "SignalCliApi.signalPreview.CAN_PREVIEW", "modulename": "SignalCliApi.signalPreview", "qualname": "CAN_PREVIEW", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "True"}, {"fullname": "SignalCliApi.signalPreview.Preview", "modulename": "SignalCliApi.signalPreview", "qualname": "Preview", "kind": "class", "doc": "<p>Class containing a preview of a link.</p>\n"}, {"fullname": "SignalCliApi.signalPreview.Preview.__init__", "modulename": "SignalCliApi.signalPreview", "qualname": "Preview.__init__", "kind": "function", "doc": "<p>Initialize the preview.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>from_dict: dict[str, Any]</strong>:  Load properties from a dict created by __to_dict__().</li>\n<li><strong>raw_preview: dict[str, Any]</strong>:  Load properties from a dict provided by signal.</li>\n<li><strong>generate_preview: bool</strong>:  Should we generate a preview?\nTrue requires linkpreview to be installed; If linkpreview is not installed, setting this to True will cause\na RuntimeError to be raised.\nThis is ignored if 'from_dict', or 'raw_preview' are defined.</li>\n<li><strong>url: Optional[str]</strong>:  The URL this preview, well, previews.</li>\n<li><strong>title: Optional[str]</strong>:  The title.</li>\n<li><strong>description: Optional[str]</strong>:  The description.</li>\n<li><strong>image: Optional[Attachment | str]</strong>:  The preview image, either an Attachment object pointing to a local\nfile, or a str witch is the full path to the image file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>RuntimeError</strong>:  If generate_preview is True and linkpreview is not installed.</li>\n<li><strong>RuntimeError</strong>:  If we're not able to make the directory where we store the preview images we generate.</li>\n<li><strong>ParameterError</strong>:  If generate_preview is True and 'url' is not defined.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_preview</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">generate_preview</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">description</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">image</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalPreview.Preview.url", "modulename": "SignalCliApi.signalPreview", "qualname": "Preview.url", "kind": "variable", "doc": "<p>The url this preview, previews.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalPreview.Preview.title", "modulename": "SignalCliApi.signalPreview", "qualname": "Preview.title", "kind": "variable", "doc": "<p>The title of the page.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalPreview.Preview.description", "modulename": "SignalCliApi.signalPreview", "qualname": "Preview.description", "kind": "variable", "doc": "<p>The description of the page.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalPreview.Preview.image", "modulename": "SignalCliApi.signalPreview", "qualname": "Preview.image", "kind": "variable", "doc": "<p>The preview image.</p>\n", "annotation": ": Optional[SignalCliApi.signalAttachment.Attachment]"}, {"fullname": "SignalCliApi.signalProfile", "modulename": "SignalCliApi.signalProfile", "kind": "module", "doc": "<p>File: signalProfile.py\nStore and maintain a signal profile.</p>\n"}, {"fullname": "SignalCliApi.signalProfile.NOT_ACCOUNT_PROFILE_MESSAGE", "modulename": "SignalCliApi.signalProfile", "qualname": "NOT_ACCOUNT_PROFILE_MESSAGE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[str]", "default_value": "&#x27;this is not the account profile, not setting property&#x27;"}, {"fullname": "SignalCliApi.signalProfile.VALUE_ALREADY_SET_MESSAGE", "modulename": "SignalCliApi.signalProfile", "qualname": "VALUE_ALREADY_SET_MESSAGE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[str]", "default_value": "&#x27;property already set to value&#x27;"}, {"fullname": "SignalCliApi.signalProfile.SUCCESS_MESSAGE", "modulename": "SignalCliApi.signalProfile", "qualname": "SUCCESS_MESSAGE", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[str]", "default_value": "&#x27;SUCCESS&#x27;"}, {"fullname": "SignalCliApi.signalProfile.NON_FATAL_ERROR_CODES", "modulename": "SignalCliApi.signalProfile", "qualname": "NON_FATAL_ERROR_CODES", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Final[list[int]]", "default_value": "[]"}, {"fullname": "SignalCliApi.signalProfile.Profile", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile", "kind": "class", "doc": "<p>Class containing the profile for either a contact or the account.</p>\n"}, {"fullname": "SignalCliApi.signalProfile.Profile.__init__", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.__init__", "kind": "function", "doc": "<p>Initialize a profile object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sync_socket: socket.socket</strong>:  The socket to run sync operations on.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>account_id: str</strong>:  This account's ID.</li>\n<li><strong>contact_id: str</strong>:  The contact ID for the account that this profile is for.</li>\n<li><strong>account_path: str</strong>:  The path to this account's data directory.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  The dict provided by __to_dict__().</li>\n<li><strong>raw_profile: Optional[dict[str, Any]]</strong>:  The dict provided by signal.</li>\n<li><strong>is_account_profile: bool</strong>:  Is this the profile for this account?</li>\n<li><strong>do_load: bool</strong>:  Try and load from disk.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sync_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contact_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">account_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_profile</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_account_profile</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">do_load</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "SignalCliApi.signalProfile.Profile.given_name", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.given_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalProfile.Profile.family_name", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.family_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalProfile.Profile.name", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalProfile.Profile.about", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.about", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalProfile.Profile.emoji", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.emoji", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalProfile.Profile.coin_address", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.coin_address", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalProfile.Profile.avatar", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.avatar", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalProfile.Profile.last_update", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.last_update", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalProfile.Profile.set_given_name", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.set_given_name", "kind": "function", "doc": "<p>Set the given name for the account profile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value: str</strong>:  The value to set the given name to.\n:returns: tuple[bool, str]: The first element is True if successfully set, False if not.\nThe second element is the string \"SUCCESS\" if successfully set, otherwise it will contain an error message\nstating what went wrong.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If value is not a string.</li>\n<li><strong>SignalError</strong>:  If Signal returns an error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalProfile.Profile.set_family_name", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.set_family_name", "kind": "function", "doc": "<p>Set the family name for the account profile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value: str</strong>:  The value to set the family name to.\n:returns: tuple[bool, str]: The first element is True or False for success or failure.\nThe second element will be the string \"SUCCESS\" on success, or a message describing what went wrong.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If value is not a string.</li>\n<li><strong>SignalError</strong>:  If Signal returns an error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalProfile.Profile.set_about", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.set_about", "kind": "function", "doc": "<p>Set the 'about' for the account profile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value: str</strong>:  The value to set the 'about' to.\n:returns: tuple[bool, str]: The first element is True or False for success or failure.\nThe second element is either the string \"SUCCESS\" on success or a message stating what went wrong.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If value is not a string.</li>\n<li><strong>SignalError</strong>:  If signal returns an error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalProfile.Profile.set_emoji", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.set_emoji", "kind": "function", "doc": "<p>Set the emoji for the account profile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value: str</strong>:  The value to set the emoji to.\n:returns: tuple[bool, str]: The first element is True or False for success or failure.\nThe second element is the string \"SUCCESS\" on success or a message stating what went wrong.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If value is not a string.</li>\n<li><strong>SignalError</strong>:  If signal returns an error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalProfile.Profile.set_coin_address", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.set_coin_address", "kind": "function", "doc": "<p>Set the mobile coin address.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value: str</strong>:  The value to set the mobile coin address to.\n:returns: tuple[bool, str]: The first element is True or False for success or failure.\nThe second element is either the string \"SUCCESS\" if successful, or a message stating what went wrong.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If value is not a string.</li>\n<li><strong>SignalError</strong>:  If signal returns an error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalProfile.Profile.set_avatar", "modulename": "SignalCliApi.signalProfile", "qualname": "Profile.set_avatar", "kind": "function", "doc": "<p>Set the avatar for the account profile.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>value: str</strong>:  The path to the image to set the avatar to.\n:returns: tuple[bool, str]: The first element is True or False for success or failure.\nThe second element is either the string \"SUCCESS\" on success or a message stating what went wrong.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If value is not a string.</li>\n<li><strong>SignalError</strong>:  If Signal returns an error.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalQuote", "modulename": "SignalCliApi.signalQuote", "kind": "module", "doc": "<p>File: signalQuote.py\nStore and manage a signal quote.</p>\n"}, {"fullname": "SignalCliApi.signalQuote.Quote", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote", "kind": "class", "doc": "<p>Class to store a quote for a message.</p>\n"}, {"fullname": "SignalCliApi.signalQuote.Quote.__init__", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote.__init__", "kind": "function", "doc": "<p>Initialize a quote.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts' Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts' Groups object.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  The dict created by __to_dict__().</li>\n<li><strong>raw_quote: Optional[dict[str, Any]]</strong>:  The dict provided by signal.</li>\n<li><strong>timestamp: Optional[Timestamp]: The timestamp.# TODO</strong>:  Figure out a better description.</li>\n<li><strong>author: Optional[Contact]</strong>:  The author of the quote.</li>\n<li><strong>text: Optional[str]</strong>:  The text of the quote.</li>\n<li><strong>attachments: Optional[Iterable[Attachment] | Attachment]</strong>:  Any attachments of the quote.</li>\n<li><strong>mentions: Optional[Iterable[Mention] | Mention]</strong>:  Any mentions in the quote.</li>\n<li><strong>conversation: Optional[Contact | Group]</strong>:  The conversation this quote is in.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_quote</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">author</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">text</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attachments</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mentions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMentions</span><span class=\"o\">.</span><span class=\"n\">Mentions</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">conversation</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalQuote.Quote.timestamp", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote.timestamp", "kind": "variable", "doc": "<p>The timestamp of this quote?</p>\n", "annotation": ": SignalCliApi.signalTimestamp.Timestamp"}, {"fullname": "SignalCliApi.signalQuote.Quote.author", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote.author", "kind": "variable", "doc": "<p>The author of the quoted message.</p>\n", "annotation": ": SignalCliApi.signalContact.Contact"}, {"fullname": "SignalCliApi.signalQuote.Quote.text", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote.text", "kind": "variable", "doc": "<p>The body of the quoted message.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalQuote.Quote.attachments", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote.attachments", "kind": "variable", "doc": "<p>Any attachments of the quoted message.</p>\n", "annotation": ": list[SignalCliApi.signalAttachment.Attachment]"}, {"fullname": "SignalCliApi.signalQuote.Quote.mentions", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote.mentions", "kind": "variable", "doc": "<p>Any mentions in the quoted message.</p>\n", "annotation": ": SignalCliApi.signalMentions.Mentions"}, {"fullname": "SignalCliApi.signalQuote.Quote.conversation", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote.conversation", "kind": "variable", "doc": "<p>The conversation Contact or Group the quoted message is in.</p>\n", "annotation": ": Union[SignalCliApi.signalContact.Contact, SignalCliApi.signalGroup.Group, NoneType]"}, {"fullname": "SignalCliApi.signalQuote.Quote.conversation_type", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote.conversation_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[SignalCliApi.signalCommon.ConversationTypes]"}, {"fullname": "SignalCliApi.signalQuote.Quote.parse_mentions", "modulename": "SignalCliApi.signalQuote", "qualname": "Quote.parse_mentions", "kind": "function", "doc": "<p>Parse the mentions contained in the quote.\n:returns: str: The text with the mentions inserted.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReaction", "modulename": "SignalCliApi.signalReaction", "kind": "module", "doc": "<p>File: signalReaction.py\nStore and handle a reaction to a message.</p>\n"}, {"fullname": "SignalCliApi.signalReaction.Reaction", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction", "kind": "class", "doc": "<p>Class to store a reaction message.</p>\n", "bases": "SignalCliApi.signalMessage.Message"}, {"fullname": "SignalCliApi.signalReaction.Reaction.__init__", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.__init__", "kind": "function", "doc": "<p>Initialize a reaction message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>account_id: str</strong>:  This account's ID.</li>\n<li><strong>config_path: str</strong>:  The full path to signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts' Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts' Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts' Devices object.</li>\n<li><strong>this_device: Device</strong>:  The Device object for the device we're currently on.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  The dict provided by __to_dict__().</li>\n<li><strong>raw_message: Optional[dict[str, Any]]</strong>:  The dict provided by signal.</li>\n<li><strong>recipient: Optional[Contact | Group]</strong>:  The recipient of this reaction message.</li>\n<li><strong>emoji: Optional[str]</strong>:  The unicode emoji.</li>\n<li><strong>target_author: Optional[Contact]</strong>:  The author of the message reacted to.</li>\n<li><strong>target_timestamp: Optional[Timestamp]</strong>:  The timestamp of the message reacted to.</li>\n<li><strong>is_remove: bool</strong>:  If True, this is a removal message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recipient</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">emoji</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_author</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">target_timestamp</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_remove</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "SignalCliApi.signalReaction.Reaction.emoji", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.emoji", "kind": "variable", "doc": "<p>The emoji that was reacted with.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalReaction.Reaction.target_author", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.target_author", "kind": "variable", "doc": "<p>The Contact object of the author of the message that was reacted to.</p>\n", "annotation": ": Optional[SignalCliApi.signalContact.Contact]"}, {"fullname": "SignalCliApi.signalReaction.Reaction.target_timestamp", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.target_timestamp", "kind": "variable", "doc": "<p>The Timestamp object of the message that was reacted to.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalReaction.Reaction.is_remove", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.is_remove", "kind": "variable", "doc": "<p>Is this a removal message?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalReaction.Reaction.previous_emoji", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.previous_emoji", "kind": "variable", "doc": "<p>The previous emoji if this is a change message.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalReaction.Reaction.is_parsed", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.is_parsed", "kind": "variable", "doc": "<p>Has this reaction been parsed?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalReaction.Reaction.send", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.send", "kind": "function", "doc": "<p>Send the reaction.\n:returns: tuple[bool, str]: True/False for sent status, string for an error message if False, or \"SUCCESS\"\n    if True.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReaction.Reaction.remove", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.remove", "kind": "function", "doc": "<p>Remove a reaction.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple[bool, str]: The first element is a boolean indicating success or failure; The second element is\n      a string, either 'SUCCESS' on success, or an error message on failure.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReaction.Reaction.is_change", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.is_change", "kind": "variable", "doc": "<p>Is this a change reaction?\nGetter.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: True, this is a change message, False, it is not.</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalReaction.Reaction.is_sent", "modulename": "SignalCliApi.signalReaction", "qualname": "Reaction.is_sent", "kind": "variable", "doc": "<p>Is this reaction already sent?</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>bool: True the reaction has been sent, False it has not.</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalReactions", "modulename": "SignalCliApi.signalReactions", "kind": "module", "doc": "<p>File: signalReactions.py\nStore and manage a list of Reactions.</p>\n"}, {"fullname": "SignalCliApi.signalReactions.Reactions", "modulename": "SignalCliApi.signalReactions", "qualname": "Reactions", "kind": "class", "doc": "<p>Class to store reactions to a message.</p>\n"}, {"fullname": "SignalCliApi.signalReactions.Reactions.__init__", "modulename": "SignalCliApi.signalReactions", "qualname": "Reactions.__init__", "kind": "function", "doc": "<p>Initialize a Reactions object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>account_id: str</strong>:  This accounts' ID.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts' Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts' Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts' Devices object.</li>\n<li><strong>this_device: Device</strong>:  The Device object for the device we're using.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  The dict provided by __to_dict__().</li>\n<li><strong>reactions: Optional[Iterable[Reaction]]</strong>:  A list of reaction objects to store in the object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reactions</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReaction</span><span class=\"o\">.</span><span class=\"n\">Reaction</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalReactions.Reactions.reaction_in", "modulename": "SignalCliApi.signalReactions", "qualname": "Reactions.reaction_in", "kind": "function", "doc": "<p>Return True if a given reaction is in the reaction list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>target_reaction: Reaction</strong>:  Reaction to search for.\n:returns: bool: True if reaction in the reaction list.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If target_reaction is not a reaction object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_reaction</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReaction</span><span class=\"o\">.</span><span class=\"n\">Reaction</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReactions.Reactions.get_by_sender", "modulename": "SignalCliApi.signalReactions", "qualname": "Reactions.get_by_sender", "kind": "function", "doc": "<p>Get by sender contact</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li>str: contact: The contact to search by.\n:returns: Optional[Reaction]: The Reaction found or None if not found.\n:raises TypeError if contact is not a Contact object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">contact</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReaction</span><span class=\"o\">.</span><span class=\"n\">Reaction</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReactions.Reactions.get_by_emoji", "modulename": "SignalCliApi.signalReactions", "qualname": "Reactions.get_by_emoji", "kind": "function", "doc": "<p>Get by emoji</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li>str: emoji: The emoji to search for.\n:returns: list[Reaction]: The reactions found; An list tuple if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If emoji is not a string.\n:raises</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">emoji</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReaction</span><span class=\"o\">.</span><span class=\"n\">Reaction</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReactions.Reactions.get_by_recipient", "modulename": "SignalCliApi.signalReactions", "qualname": "Reactions.get_by_recipient", "kind": "function", "doc": "<p>Get by recipient</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li>Contact | Group: The recipient to search for.\n:returns: list[Reaction]: The reactions found, or an empty list if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If recipient is not a Contact object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">recipient</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReaction</span><span class=\"o\">.</span><span class=\"n\">Reaction</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReceipt", "modulename": "SignalCliApi.signalReceipt", "kind": "module", "doc": "<p>File: signalReceipt.py\nStore and handle a signal receipt message.</p>\n"}, {"fullname": "SignalCliApi.signalReceipt.Receipt", "modulename": "SignalCliApi.signalReceipt", "qualname": "Receipt", "kind": "class", "doc": "<p>Class to store a receipt.</p>\n", "bases": "SignalCliApi.signalMessage.Message"}, {"fullname": "SignalCliApi.signalReceipt.Receipt.__init__", "modulename": "SignalCliApi.signalReceipt", "qualname": "Receipt.__init__", "kind": "function", "doc": "<p>Initialize a Receipt.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>account_id: str</strong>:  This accounts' ID.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts' Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts' Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts' Devices object.</li>\n<li><strong>this_device: Device</strong>:  The Device object for the device we're using.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  The dict created by __to_dict__()</li>\n<li><strong>raw_message: Optional[dict[str, Any]]</strong>:  The dict provided by signal.</li>\n<li><strong>sender: Optional[Contact]</strong>:  The sender of the receipt.</li>\n<li><strong>recipient: Optional[Contact | Group]</strong>:  The recipient of the receipt.</li>\n<li><strong>device: Optional[Device]</strong>:  The device this receipt was generated from.</li>\n<li><strong>timestamp: Optional[Timestamp]</strong>:  The timestamp of the receipt.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recipient</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalReceipt.Receipt.when", "modulename": "SignalCliApi.signalReceipt", "qualname": "Receipt.when", "kind": "variable", "doc": "<p>When this was read / viewed / delivered.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalReceipt.Receipt.receipt_type", "modulename": "SignalCliApi.signalReceipt", "qualname": "Receipt.receipt_type", "kind": "variable", "doc": "<p>The type of receipt.</p>\n", "annotation": ": SignalCliApi.signalCommon.ReceiptTypes"}, {"fullname": "SignalCliApi.signalReceipt.Receipt.timestamps", "modulename": "SignalCliApi.signalReceipt", "qualname": "Receipt.timestamps", "kind": "variable", "doc": "<p>The timestamps this applies to.</p>\n", "annotation": ": list[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalReceipt.Receipt.body", "modulename": "SignalCliApi.signalReceipt", "qualname": "Receipt.body", "kind": "variable", "doc": "<p>The body of the message.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalReceiveThread", "modulename": "SignalCliApi.signalReceiveThread", "kind": "module", "doc": "<p>File: signalReceiveThread.py\nHandle receiving messages from signal.</p>\n"}, {"fullname": "SignalCliApi.signalReceiveThread.ReceiveThread", "modulename": "SignalCliApi.signalReceiveThread", "qualname": "ReceiveThread", "kind": "class", "doc": "<p>The reception thread.</p>\n", "bases": "threading.Thread"}, {"fullname": "SignalCliApi.signalReceiveThread.ReceiveThread.__init__", "modulename": "SignalCliApi.signalReceiveThread", "qualname": "ReceiveThread.__init__", "kind": "function", "doc": "<p>Create the reception thread.\nCallbacks must have the signature of:\n    callback(account: Account, message: Message, *additional_params) where the first element passed is the\n    Account object for the message received, and the second element is the message that was received.\nThe return value of callback can be True, False, or None. If the all_messages_callback returns a boolean, it is\n    returned, if the all_messages_callback returns None, then the return value of the specific callback is\n    returned.  If True is returned, Reception is stopped. If False, or None are returned, reception continues.\n    All other values are assumed to be False.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>server_address: tuple[str, int] | str</strong>:  The server address to connect the reception socket to.</li>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands through.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>sticker_packs: StickerPacks</strong>:  The loaded StickerPacks object.</li>\n<li><strong>account: Account</strong>:  The account to receive for.</li>\n<li><strong>all_messages_callback: Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  Callback for ALL messages.</li>\n<li><strong>received_message_callback: Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  Callback for received\nmessages.</li>\n<li><strong>receipt_message_callback:Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  Callback for message receipts.</li>\n<li><strong>sync_message_callback: Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  Callback for sync messages.</li>\n<li><strong>typing_message_callback: Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  Callback for typing change\nmessages.</li>\n<li><strong>story_message_callback:Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  Callback for story messages.</li>\n<li><strong>payment_message_callback: Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  Callback for payment messages.</li>\n<li><strong>reaction_message_callback: Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  Callback for reaction\nmessages.</li>\n<li><strong>call_message_callback:Optional[tuple[Callable, Optional[list[Any]]]]</strong>:  Callback for call messages.</li>\n<li><strong>do_expunge: bool</strong>:  True we should automatically expunge expired messages.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server_address</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sticker_packs</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">StickerPacks</span>,</span><span class=\"param\">\t<span class=\"n\">account</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAccount</span><span class=\"o\">.</span><span class=\"n\">Account</span>,</span><span class=\"param\">\t<span class=\"n\">all_messages_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">received_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">receipt_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sync_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">typing_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">story_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">payment_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reaction_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">call_message_callback</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]]]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">do_expunge</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "SignalCliApi.signalReceiveThread.ReceiveThread.run", "modulename": "SignalCliApi.signalReceiveThread", "qualname": "ReceiveThread.run", "kind": "function", "doc": "<p>Thread override.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReceiveThread.ReceiveThread.stop", "modulename": "SignalCliApi.signalReceiveThread", "qualname": "ReceiveThread.stop", "kind": "function", "doc": "<p>Stops the reception.\n:returns: None</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReceivedMessage", "modulename": "SignalCliApi.signalReceivedMessage", "kind": "module", "doc": "<p>File: signalReceivedMessage.py\nStore and handle an incoming message.</p>\n"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage", "kind": "class", "doc": "<p>Class to store a message that has been received.</p>\n", "bases": "SignalCliApi.signalMessage.Message"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.__init__", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.__init__", "kind": "function", "doc": "<p>Initialize a ReceivedMessage object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to use for commands.</li>\n<li><strong>account_id: str</strong>:  This accounts' ID.</li>\n<li><strong>config_path: str</strong>:  The full path to signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts' Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts' Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts' Devices object.</li>\n<li><strong>this_device: Device</strong>:  The Device object for the device we're on.</li>\n<li><strong>sticker_packs: StickerPacks</strong>:  The loaded sticker packs.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  A dict created by __to_dict__().</li>\n<li><strong>raw_message: Optional[dict[str, Any]]</strong>:  A dict provided by signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">sticker_packs</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">StickerPacks</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.body", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.body", "kind": "variable", "doc": "<p>The body of the message.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.attachments", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.attachments", "kind": "variable", "doc": "<p>The attachments to this message..</p>\n", "annotation": ": Optional[list[SignalCliApi.signalAttachment.Attachment]]"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.mentions", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.mentions", "kind": "variable", "doc": "<p>Any mentions in this message.</p>\n", "annotation": ": SignalCliApi.signalMentions.Mentions"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.reactions", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.reactions", "kind": "variable", "doc": "<p>The reactions to this message.</p>\n", "annotation": ": SignalCliApi.signalReactions.Reactions"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.sticker", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.sticker", "kind": "variable", "doc": "<p>The sticker of this message.</p>\n", "annotation": ": Optional[SignalCliApi.signalSticker.Sticker]"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.quote", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.quote", "kind": "variable", "doc": "<p>This messages quote.</p>\n", "annotation": ": Optional[SignalCliApi.signalQuote.Quote]"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.expiration", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.expiration", "kind": "variable", "doc": "<p>The expiration time as a timedelta in seconds.</p>\n", "annotation": ": Optional[datetime.timedelta]"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.expiration_timestamp", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.expiration_timestamp", "kind": "variable", "doc": "<p>The Timestamp for when this message expires.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.is_expired", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.is_expired", "kind": "variable", "doc": "<p>Is this message expired?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.previews", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.previews", "kind": "variable", "doc": "<p>Any previews this message holds.</p>\n", "annotation": ": Optional[list[SignalCliApi.signalPreview.Preview]]"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.is_group_invite", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.is_group_invite", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.mark_delivered", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.mark_delivered", "kind": "function", "doc": "<p>Mark the message as delivered.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>when: Optional[Timestamp]</strong>:  When the message was delivered, if None NOW is used.\n:returns: None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If when is not a Timestamp object, raised by super()</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">when</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.mark_read", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.mark_read", "kind": "function", "doc": "<p>Mark the message as read.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>when: Timestamp</strong>:  When the message was read; If this is None, NOW is used.</li>\n<li><strong>send_receipt: bool</strong>:  Send the read receipt; If this is True, 'when' is ignored.\n:returns: None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If when not a Timestamp object, raised by super(), or if send_receipt is not a bool.</li>\n<li><strong>RuntimeError</strong>:  On error sending receipt.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">when</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">send_receipt</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.mark_viewed", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.mark_viewed", "kind": "function", "doc": "<p>Mark the message as viewed.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>when: Timestamp</strong>:  When the message was viewed; If this is None, NOW is used.</li>\n<li><strong>send_receipt: bool</strong>:  Send a viewed receipt; If this is True, then when is ignored.\n:returns: None</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If when not a Timestamp object, raised by super(), or if send_receipt is not a bool.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">when</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">send_receipt</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.get_quote", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.get_quote", "kind": "function", "doc": "<p>Get a quote object for this message.\n:returns: Quote: This message as a quote.</p>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>ValueError</strong>:  On invalid recipient_type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalQuote</span><span class=\"o\">.</span><span class=\"n\">Quote</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.parse_mentions", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.parse_mentions", "kind": "function", "doc": "<p>Parse the mentions.\n:returns: Optional[str]: The body with the mentions inserted; If 'mentions' is None, then the original\n    body is returned, if body is None, then None is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.react", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.react", "kind": "function", "doc": "<p>Create and send a Reaction to this message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>emoji: str</strong>:  The emoji to react with.\n:returns: tuple[bool, Reaction | str]: The first element of the returned tuple is a bool, which is True or False\ndepending on success or failure.\nThe second element of the tuple will either be a Reaction object on success, or an error message stating\nwhat went wrong on failure.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If emoji is not a string.</li>\n<li>ValueError: If emoji length is not one or two characters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">emoji</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReaction</span><span class=\"o\">.</span><span class=\"n\">Reaction</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalReceivedMessage.ReceivedMessage.reply", "modulename": "SignalCliApi.signalReceivedMessage", "qualname": "ReceivedMessage.reply", "kind": "function", "doc": "<p>Send a reply to this message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>body: str</strong>:  The body to reply with.</li>\n<li><strong>attachments: Optional[Iterable[Attachment | str] | Attachment | str]</strong>:  Any attachments to the message.</li>\n<li><strong>mentions: Optional[Iterable[Mention] | Mentions | Mention]</strong>:  Any mentions in this message.</li>\n<li><strong>sticker: Optional[Sticker]</strong>:  The sticker to send as a message.</li>\n<li><strong>preview: Optional[Preview]</strong>:  Any URL preview for this message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple[tuple[bool, Contact | Group, str | SentMessage], ...]: A tuple of tuples. One inner tuple per\n      recipient of the message.\n      The first element of the inner tuple is a bool which is True or False on success or failure.\n      The second element of the inner tuple is the Contact or Group that this message was sent to.\n      The third element of the inner tuple is either the SentMessage object on success or an error message on\n      failure.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attachments</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mentions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMentions</span><span class=\"o\">.</span><span class=\"n\">Mentions</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sticker</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">Sticker</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">preview</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalPreview</span><span class=\"o\">.</span><span class=\"n\">Preview</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSentMessage</span><span class=\"o\">.</span><span class=\"n\">SentMessage</span><span class=\"p\">],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalSentMessage", "modulename": "SignalCliApi.signalSentMessage", "kind": "module", "doc": "<p>File: signalSentMessage.py\nStore and maintain a sent message.</p>\n"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage", "kind": "class", "doc": "<p>Class to store a sent message.</p>\n", "bases": "SignalCliApi.signalMessage.Message"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.__init__", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.__init__", "kind": "function", "doc": "<p>Initialize a SentMessage object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to use for command operations.</li>\n<li><strong>account_id: str</strong>:  This accounts' ID.</li>\n<li><strong>config_path: str</strong>:  The full path to signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts' Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts' Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts' Devices object.</li>\n<li><strong>this_device: Device</strong>:  The Device object representing the device we're on.</li>\n<li><strong>sticker_packs: StickerPacks</strong>:  The loaded StickerPacks object.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  The dict created by __to_dict__().</li>\n<li><strong>raw_message: Optional[dict[str, Any]]</strong>:  The dict provided by signal.</li>\n<li><strong>recipient: Optional[Contact | Group]</strong>:  The recipient of this message.</li>\n<li><strong>timestamp: Optional[Timestamp]</strong>:  The timestamp of this message.</li>\n<li><strong>body: Optional[str]</strong>:  The body of this message.</li>\n<li><strong>attachments: Optional[Iterable[Attachment] | Attachment]</strong>:  Any attachments to this message.</li>\n<li><strong>mentions: Optional[Iterable[Mention] | Mentions | Mention]</strong>:  Any mentions in this message.</li>\n<li><strong>reactions: Optional[Iterable[Reaction] | Reactions | Reaction]</strong>:  Any reactions to this message.</li>\n<li><strong>sticker: Optional[Sticker]</strong>:  The sticker for this message.</li>\n<li><strong>quote: Optional[Quote]</strong>:  The quote this message contains.</li>\n<li><strong>expiration: Optional[timedelta]</strong>:  The expiration time in seconds as a timedelta.</li>\n<li><strong>is_sent: bool</strong>:  Is this message already sent?</li>\n<li><strong>sent_to: Optional[Iterable[Contact] | Contact]</strong>:  The Contacts of the people this message was sent to, if\nthe message was sent to a Group, the members of the group will show up here individually.</li>\n<li><strong>preview: Optional[Preview]</strong>:  Any URL preview this message contains.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">sticker_packs</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">StickerPacks</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recipient</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attachments</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mentions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMentions</span><span class=\"o\">.</span><span class=\"n\">Mentions</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reactions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReaction</span><span class=\"o\">.</span><span class=\"n\">Reaction</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReactions</span><span class=\"o\">.</span><span class=\"n\">Reactions</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReaction</span><span class=\"o\">.</span><span class=\"n\">Reaction</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sticker</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">Sticker</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">quote</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalQuote</span><span class=\"o\">.</span><span class=\"n\">Quote</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">expiration</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_sent</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sent_to</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">preview</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalPreview</span><span class=\"o\">.</span><span class=\"n\">Preview</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.body", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.body", "kind": "variable", "doc": "<p>The body of the message.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.attachments", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.attachments", "kind": "variable", "doc": "<p>Any attachments to the message.</p>\n", "annotation": ": Optional[list[SignalCliApi.signalAttachment.Attachment]]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.mentions", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.mentions", "kind": "variable", "doc": "<p>Any mentions in the message.</p>\n", "annotation": ": SignalCliApi.signalMentions.Mentions"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.reactions", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.reactions", "kind": "variable", "doc": "<p>Any reactions to the message.</p>\n", "annotation": ": SignalCliApi.signalReactions.Reactions"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.sticker", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.sticker", "kind": "variable", "doc": "<p>The sticker for this message.</p>\n", "annotation": ": Optional[SignalCliApi.signalSticker.Sticker]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.quote", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.quote", "kind": "variable", "doc": "<p>The quote this message contains.</p>\n", "annotation": ": Optional[SignalCliApi.signalQuote.Quote]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.expiration", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.expiration", "kind": "variable", "doc": "<p>The expiration time of this message in seconds as a timedelta.</p>\n", "annotation": ": Optional[datetime.timedelta]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.expiration_timestamp", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.expiration_timestamp", "kind": "variable", "doc": "<p>The timestamp at which this message expires.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.is_expired", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.is_expired", "kind": "variable", "doc": "<p>Is this message expired?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.is_sent", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.is_sent", "kind": "variable", "doc": "<p>Was this message sent?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.sent_to", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.sent_to", "kind": "variable", "doc": "<p>List of Contacts of who this message has been sent to.</p>\n", "annotation": ": list[SignalCliApi.signalContact.Contact]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.delivery_receipts", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.delivery_receipts", "kind": "variable", "doc": "<p>The delivery receipts for this message.</p>\n", "annotation": ": list[SignalCliApi.signalReceipt.Receipt]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.read_receipts", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.read_receipts", "kind": "variable", "doc": "<p>The read receipts for this message.</p>\n", "annotation": ": list[SignalCliApi.signalReceipt.Receipt]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.viewed_receipts", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.viewed_receipts", "kind": "variable", "doc": "<p>The viewed receipts for this message.</p>\n", "annotation": ": list[SignalCliApi.signalReceipt.Receipt]"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.preview", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.preview", "kind": "variable", "doc": "<p>Any URL previews for this message.</p>\n", "annotation": ": SignalCliApi.signalPreview.Preview"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.get_quote", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.get_quote", "kind": "function", "doc": "<p>Get a quote object for this message.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>Quote: This message as a Quote object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalQuote</span><span class=\"o\">.</span><span class=\"n\">Quote</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.parse_mentions", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.parse_mentions", "kind": "function", "doc": "<p>Parse mentions in this message.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: The body with mentions parsed; If 'mentions' is None, the original body is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.react", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.react", "kind": "function", "doc": "<p>Send a reaction to this message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>emoji: str</strong>:  The emoji to react with.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple[bool, Reaction | str]: The first element is a bool which is either True or False on success or\n      failure.\n      The second element is either the Reaction object on success, or a string with an error message on failure.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">emoji</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalReaction</span><span class=\"o\">.</span><span class=\"n\">Reaction</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalSentMessage.SentMessage.reply", "modulename": "SignalCliApi.signalSentMessage", "qualname": "SentMessage.reply", "kind": "function", "doc": "<p>Send a reply to this message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>body: str</strong>:  The body to reply with.</li>\n<li><strong>attachments: Optional[Iterable[Attachment | str] | Attachment | str]</strong>:  Any attachments to the message.</li>\n<li><strong>mentions: Optional[Iterable[Mention] | Mentions | Mention]</strong>:  Any mentions in this message.</li>\n<li><strong>sticker: Optional[Sticker]</strong>:  The sticker to send as a message.</li>\n<li><strong>preview: Optional[Preview]</strong>:  Any URL preview for this message.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuple[tuple[bool, Contact | Group, str | SentMessage], ...]: A tuple of tuples. One inner tuple per\n      recipient of the message.\n      The first element of the inner tuple is a bool which is True or False on success or failure.\n      The second element of the inner tuple is the Contact or Group that this message was sent to.\n      The third element of the inner tuple is either the SentMessage object on success or an error message on\n      failure.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attachments</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span> <span class=\"o\">|</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mentions</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">],</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMentions</span><span class=\"o\">.</span><span class=\"n\">Mentions</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalMention</span><span class=\"o\">.</span><span class=\"n\">Mention</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sticker</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">Sticker</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">preview</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalPreview</span><span class=\"o\">.</span><span class=\"n\">Preview</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span> <span class=\"o\">|</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">Self</span><span class=\"p\">]],</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalSticker", "modulename": "SignalCliApi.signalSticker", "kind": "module", "doc": "<p>File: signalSticker.py\nHandle and manage stickers and sticker packs.</p>\n"}, {"fullname": "SignalCliApi.signalSticker.Sticker", "modulename": "SignalCliApi.signalSticker", "qualname": "Sticker", "kind": "class", "doc": "<p>Sticker object.</p>\n"}, {"fullname": "SignalCliApi.signalSticker.Sticker.__init__", "modulename": "SignalCliApi.signalSticker", "qualname": "Sticker.__init__", "kind": "function", "doc": "<p>Initialize a Sticker object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pack_id: str</strong>:  The pack ID.</li>\n<li><strong>pack_path: str</strong>:  The full path to the pack directory.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  Load this sticker from a dict provided by __to_dict__().</li>\n<li><strong>from_manifest: Optional[dict[str, str]]</strong>:  Load this sticker from a manifest file.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>TypeError</strong>:  If any of the properties are of the wrong type.</li>\n<li><strong>FileNotFoundError</strong>:  If 'pack_path', or 'file_path' does not exist.</li>\n<li><strong>NotADirectoryError</strong>:  If 'pack_path' is not a directory.</li>\n<li><strong>ValueError</strong>:  If 'file_path' is not a regular file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pack_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pack_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_manifest</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">int</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalSticker.Sticker.id", "modulename": "SignalCliApi.signalSticker", "qualname": "Sticker.id", "kind": "variable", "doc": "<p>This stickers ID.</p>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalSticker.Sticker.emoji", "modulename": "SignalCliApi.signalSticker", "qualname": "Sticker.emoji", "kind": "variable", "doc": "<p>The emoji related to this sticker.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalSticker.Sticker.file_path", "modulename": "SignalCliApi.signalSticker", "qualname": "Sticker.file_path", "kind": "variable", "doc": "<p>The full path to the image file of this sticker.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalSticker.Sticker.content_type", "modulename": "SignalCliApi.signalSticker", "qualname": "Sticker.content_type", "kind": "variable", "doc": "<p>The Content-Type of the file_path.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalSticker.Sticker.pack_id", "modulename": "SignalCliApi.signalSticker", "qualname": "Sticker.pack_id", "kind": "variable", "doc": "<p>The pack ID.\nGetter.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>str: The pack ID.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalSticker.StickerPack", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPack", "kind": "class", "doc": "<p>Sticker Pack object.</p>\n"}, {"fullname": "SignalCliApi.signalSticker.StickerPack.__init__", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPack.__init__", "kind": "function", "doc": "<p>Initialize a StickerPack object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>pack_id: str</strong>:  The pack ID.</li>\n<li><strong>pack_path: st</strong>:  The full path to the pack directory.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  Load properties from a dict created by __to_dict__().</li>\n<li><strong>from_manifest: Optional[dict[str, Any]]</strong>:  Load properties from a manifest dict provided by signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pack_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">pack_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_manifest</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalSticker.StickerPack.pack_id", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPack.pack_id", "kind": "variable", "doc": "<p>The pack ID of this pack.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalSticker.StickerPack.title", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPack.title", "kind": "variable", "doc": "<p>The title of this pack.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalSticker.StickerPack.author", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPack.author", "kind": "variable", "doc": "<p>The author of the sticker pack.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalSticker.StickerPack.cover", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPack.cover", "kind": "variable", "doc": "<p>The cover Sticker object.</p>\n", "annotation": ": Optional[SignalCliApi.signalSticker.Sticker]"}, {"fullname": "SignalCliApi.signalSticker.StickerPack.stickers", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPack.stickers", "kind": "variable", "doc": "<p></p>\n", "annotation": ": list[SignalCliApi.signalSticker.Sticker]"}, {"fullname": "SignalCliApi.signalSticker.StickerPack.get_by_id", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPack.get_by_id", "kind": "function", "doc": "<p>Get a sticker given the sticker id.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>sticker_id: int</strong>:  The sticker id to get.\n:returns: Optional[Sticker]: The sticker, or None if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If sticker_id not an int.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sticker_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">Sticker</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalSticker.StickerPacks", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPacks", "kind": "class", "doc": "<p>Object for storing multiple sticker packs.</p>\n"}, {"fullname": "SignalCliApi.signalSticker.StickerPacks.__init__", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPacks.__init__", "kind": "function", "doc": "<p>Initialize the StickerPacks object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "SignalCliApi.signalSticker.StickerPacks.packs", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPacks.packs", "kind": "variable", "doc": "<p>A list of known StickerPacks.</p>\n", "annotation": ": list[SignalCliApi.signalSticker.StickerPack]"}, {"fullname": "SignalCliApi.signalSticker.StickerPacks.get_pack_by_name", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPacks.get_pack_by_name", "kind": "function", "doc": "<p>Get sticker pack by name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li>str: name: The name to search for.\n:returns: Optional[StickerPack]: The sticker pack, or None if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If name not a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">StickerPack</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalSticker.StickerPacks.get_pack_by_id", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPacks.get_pack_by_id", "kind": "function", "doc": "<p>Get sticker pack by pack id.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li>str: pack_id: The pack id to search for.\n:returns: Optional[StickerPack]</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If pack_id is not a string.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pack_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">StickerPack</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalSticker.StickerPacks.get_sticker", "modulename": "SignalCliApi.signalSticker", "qualname": "StickerPacks.get_sticker", "kind": "function", "doc": "<p>Get a sticker, given pack id, and sticker id.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li>str: pack_id: The pack id of the sticker.</li>\n<li>int: sticker_id: The sticker id of the sticker.\n:returns: Optional[Sticker]: The sticker, or None if not found.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If pack_id is not a string, or if sticker_id is not an int.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pack_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sticker_id</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">Sticker</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalStoryMessage", "modulename": "SignalCliApi.signalStoryMessage", "kind": "module", "doc": "<p>File: signalStoryMessage.py\nStore and handle a story message.</p>\n"}, {"fullname": "SignalCliApi.signalStoryMessage.StoryMessage", "modulename": "SignalCliApi.signalStoryMessage", "qualname": "StoryMessage", "kind": "class", "doc": "<p>Class to store a story message.</p>\n", "bases": "SignalCliApi.signalMessage.Message"}, {"fullname": "SignalCliApi.signalStoryMessage.StoryMessage.__init__", "modulename": "SignalCliApi.signalStoryMessage", "qualname": "StoryMessage.__init__", "kind": "function", "doc": "<p>Initialize a story message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>account_id: str</strong>:  This accounts' ID.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts' Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts' Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts' Devices object.</li>\n<li><strong>this_device: Device</strong>:  The Device object representing this device.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  A dict provided by __to_dict__().</li>\n<li><strong>raw_message: Optional[dict[str, Any]]</strong>:  A dict provided by Signal.</li>\n<li><strong>sender: Optional[Contact]</strong>:  The sender of this message.</li>\n<li><strong>recipient: Optional[Contact | Group]: The recipient of this message. # TODO</strong>:  Check if this is needed.</li>\n<li><strong>device: Optional[Device]</strong>:  The device sending this message.</li>\n<li><strong>timestamp: Optional[Timestamp]</strong>:  The timestamp of this message.</li>\n<li><strong>allows_replies: bool</strong>:  Does this message allow replies? Defaults to True.</li>\n<li><strong>preview: Optional[Preview]</strong>:  Any URL preview this message contains.</li>\n<li><strong>attachment: Optional[Attachment | TextAttachment]</strong>:  Any attachment to this message.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recipient</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allows_replies</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">preview</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalPreview</span><span class=\"o\">.</span><span class=\"n\">Preview</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">attachment</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalAttachment</span><span class=\"o\">.</span><span class=\"n\">Attachment</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTextAttachment</span><span class=\"o\">.</span><span class=\"n\">TextAttachment</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalStoryMessage.StoryMessage.allows_replies", "modulename": "SignalCliApi.signalStoryMessage", "qualname": "StoryMessage.allows_replies", "kind": "variable", "doc": "<p>Does this story message allow replies?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalStoryMessage.StoryMessage.preview", "modulename": "SignalCliApi.signalStoryMessage", "qualname": "StoryMessage.preview", "kind": "variable", "doc": "<p>Any URL preview this story holds.</p>\n", "annotation": ": Optional[SignalCliApi.signalPreview.Preview]"}, {"fullname": "SignalCliApi.signalStoryMessage.StoryMessage.attachment", "modulename": "SignalCliApi.signalStoryMessage", "qualname": "StoryMessage.attachment", "kind": "variable", "doc": "<p></p>\n", "annotation": ": SignalCliApi.signalAttachment.Attachment | SignalCliApi.signalTextAttachment.TextAttachment"}, {"fullname": "SignalCliApi.signalStoryMessage.StoryMessage.attachment_type", "modulename": "SignalCliApi.signalStoryMessage", "qualname": "StoryMessage.attachment_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": SignalCliApi.signalCommon.AttachmentTypes"}, {"fullname": "SignalCliApi.signalSyncMessage", "modulename": "SignalCliApi.signalSyncMessage", "kind": "module", "doc": "<p>File: signalSyncMessage.py\nStore and handle Sync Messages.</p>\n"}, {"fullname": "SignalCliApi.signalSyncMessage.SyncMessage", "modulename": "SignalCliApi.signalSyncMessage", "qualname": "SyncMessage", "kind": "class", "doc": "<p>Class to store the different type of sync messages.</p>\n", "bases": "SignalCliApi.signalMessage.Message"}, {"fullname": "SignalCliApi.signalSyncMessage.SyncMessage.__init__", "modulename": "SignalCliApi.signalSyncMessage", "qualname": "SyncMessage.__init__", "kind": "function", "doc": "<p>Initialize a SyncMessage object.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>account_id: str</strong>:  This accounts' ID.</li>\n<li><strong>config_path: str</strong>:  The full path to signal-cli directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts' Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts' Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts' Devices object.</li>\n<li><strong>this_device: Device</strong>:  The device object representing the device we're on.</li>\n<li><strong>sticker_packs: StickerPacks</strong>:  The loaded sticker packs.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  Load properties from a dict provided by __to_dict__().</li>\n<li><strong>raw_message: Optional[dict[str, Any]]</strong>:  Load properties from a dict provided by Signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">sticker_packs</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalSticker</span><span class=\"o\">.</span><span class=\"n\">StickerPacks</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalSyncMessage.SyncMessage.sync_type", "modulename": "SignalCliApi.signalSyncMessage", "qualname": "SyncMessage.sync_type", "kind": "variable", "doc": "<p>The type of sync this message represents.</p>\n", "annotation": ": SignalCliApi.signalCommon.SyncTypes"}, {"fullname": "SignalCliApi.signalSyncMessage.SyncMessage.raw_sent_message", "modulename": "SignalCliApi.signalSyncMessage", "qualname": "SyncMessage.raw_sent_message", "kind": "variable", "doc": "<p>The raw dict of a sent message.???</p>\n", "annotation": ": Optional[dict[str, Any]]"}, {"fullname": "SignalCliApi.signalSyncMessage.SyncMessage.read_messages", "modulename": "SignalCliApi.signalSyncMessage", "qualname": "SyncMessage.read_messages", "kind": "variable", "doc": "<p>Read message sync list.</p>\n", "annotation": ": list[tuple[SignalCliApi.signalContact.Contact, SignalCliApi.signalTimestamp.Timestamp]]"}, {"fullname": "SignalCliApi.signalSyncMessage.SyncMessage.blocked_contacts", "modulename": "SignalCliApi.signalSyncMessage", "qualname": "SyncMessage.blocked_contacts", "kind": "variable", "doc": "<p>Blocked contact sync list.</p>\n", "annotation": ": list[str]"}, {"fullname": "SignalCliApi.signalSyncMessage.SyncMessage.blocked_groups", "modulename": "SignalCliApi.signalSyncMessage", "qualname": "SyncMessage.blocked_groups", "kind": "variable", "doc": "<p>Blocked groups sync list.</p>\n", "annotation": ": list[str]"}, {"fullname": "SignalCliApi.signalTextAttachment", "modulename": "SignalCliApi.signalTextAttachment", "kind": "module", "doc": "<p>File: signalTextAttachment.py\nStore a signal Text Attachment.</p>\n"}, {"fullname": "SignalCliApi.signalTextAttachment.TextAttachment", "modulename": "SignalCliApi.signalTextAttachment", "qualname": "TextAttachment", "kind": "class", "doc": "<p>Class to store a 'text attachment' from story messages.</p>\n"}, {"fullname": "SignalCliApi.signalTextAttachment.TextAttachment.__init__", "modulename": "SignalCliApi.signalTextAttachment", "qualname": "TextAttachment.__init__", "kind": "function", "doc": "<p>Initialize a text attachment.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  Load from a dict created by __to_dict__().</li>\n<li><strong>raw_attachment: Optional[dict[str, Any]]</strong>:  Load from a dict provided by Signal.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_attachment</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalTextAttachment.TextAttachment.text", "modulename": "SignalCliApi.signalTextAttachment", "qualname": "TextAttachment.text", "kind": "variable", "doc": "<p>The text of the attachment.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalTextAttachment.TextAttachment.style", "modulename": "SignalCliApi.signalTextAttachment", "qualname": "TextAttachment.style", "kind": "variable", "doc": "<p>The text style of the attachment.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalTextAttachment.TextAttachment.text_background_color", "modulename": "SignalCliApi.signalTextAttachment", "qualname": "TextAttachment.text_background_color", "kind": "variable", "doc": "<p>The background colour of the text.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalTextAttachment.TextAttachment.text_foreground_color", "modulename": "SignalCliApi.signalTextAttachment", "qualname": "TextAttachment.text_foreground_color", "kind": "variable", "doc": "<p>The foreground colour of the text.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalTextAttachment.TextAttachment.background_color", "modulename": "SignalCliApi.signalTextAttachment", "qualname": "TextAttachment.background_color", "kind": "variable", "doc": "<p>The background colour.</p>\n", "annotation": ": str"}, {"fullname": "SignalCliApi.signalThumbnail", "modulename": "SignalCliApi.signalThumbnail", "kind": "module", "doc": "<p>File signalThumbnail.py\nStore and handle a signal thumbnail.</p>\n"}, {"fullname": "SignalCliApi.signalThumbnail.Thumbnail", "modulename": "SignalCliApi.signalThumbnail", "qualname": "Thumbnail", "kind": "class", "doc": "<p>Class to store a thumbnail.</p>\n"}, {"fullname": "SignalCliApi.signalThumbnail.Thumbnail.__init__", "modulename": "SignalCliApi.signalThumbnail", "qualname": "Thumbnail.__init__", "kind": "function", "doc": "<p>Initialize a Thumbnail.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  The dict provided by __to_dict__().</li>\n<li><strong>raw_thumbnail: Optional[dict[str, Any]]</strong>:  The raw dict provided by signal.</li>\n<li><strong>local_path: Optional[str]</strong>:  The local path of the thumbnail.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_thumbnail</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">local_path</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalThumbnail.Thumbnail.content_type", "modulename": "SignalCliApi.signalThumbnail", "qualname": "Thumbnail.content_type", "kind": "variable", "doc": "<p>The thumbnail content-type.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalThumbnail.Thumbnail.filename", "modulename": "SignalCliApi.signalThumbnail", "qualname": "Thumbnail.filename", "kind": "variable", "doc": "<p>The thumbnail filename.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalThumbnail.Thumbnail.local_path", "modulename": "SignalCliApi.signalThumbnail", "qualname": "Thumbnail.local_path", "kind": "variable", "doc": "<p>The local path to the file.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "SignalCliApi.signalThumbnail.Thumbnail.exists", "modulename": "SignalCliApi.signalThumbnail", "qualname": "Thumbnail.exists", "kind": "variable", "doc": "<p>Does this file exist on disk?</p>\n", "annotation": ": bool"}, {"fullname": "SignalCliApi.signalThumbnail.Thumbnail.size", "modulename": "SignalCliApi.signalThumbnail", "qualname": "Thumbnail.size", "kind": "variable", "doc": "<p>The size of the thumbnail file in bytes.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "SignalCliApi.signalThumbnail.Thumbnail.display", "modulename": "SignalCliApi.signalThumbnail", "qualname": "Thumbnail.display", "kind": "function", "doc": "<p>Run xdgopen on the thumbnail.\n:returns: bool: True = xdgopen successfully called.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp", "modulename": "SignalCliApi.signalTimestamp", "kind": "module", "doc": "<p>File signalTimestamp.py\nStore and manage a timestamp.</p>\n"}, {"fullname": "SignalCliApi.signalTimestamp.DEBUG", "modulename": "SignalCliApi.signalTimestamp", "qualname": "DEBUG", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool", "default_value": "False"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp", "kind": "class", "doc": "<p>Time stamp object.</p>\n"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.__init__", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">object</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">datetime_obj</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">now</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.timestamp", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.timestamp", "kind": "variable", "doc": "<p>The integer timestamp.</p>\n", "annotation": ": int"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.datetime", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.datetime", "kind": "variable", "doc": "<p>The tz aware datetime object.</p>\n", "annotation": ": Optional[datetime.datetime]"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_timestamp", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_timestamp", "kind": "function", "doc": "<p>Get the timestamp int.\n:returns: int: Timestamp integer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_display_time", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_display_time", "kind": "function", "doc": "<p>Get the timestamp as a display string.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>local_time: bool</strong>:  True to convert to local time, False to leave as UTC.\n:returns: str: A display version of the timestamp, optionally converted to localtime.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li>TypeError: If local_time is not a boolean.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">local_time</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_local_time", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_local_time", "kind": "function", "doc": "<p>Get a datetime.datetime object that has been localized to the system timezone.\n:returns: datetime.datetime object representing the timestamp in local time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_seconds_ago", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_seconds_ago", "kind": "function", "doc": "<p>Get the number of seconds that has elapsed since this timestamp's time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number of seconds.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_minutes_ago", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_minutes_ago", "kind": "function", "doc": "<p>Get the number of minutes that has elapsed since this timestamp's time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number of minutes.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_hours_ago", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_hours_ago", "kind": "function", "doc": "<p>Get the number of hours that has elapsed since this timestamp's time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number of hours.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_days_ago", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_days_ago", "kind": "function", "doc": "<p>Get the number of days elapsed since this timestamp's time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number of days.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_weeks_ago", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_weeks_ago", "kind": "function", "doc": "<p>Get the number of weeks that have elapsed since the timestamp's time.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>int: The number of weeks.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_date", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_date", "kind": "function", "doc": "<p>Get the date portion of this timestamp.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>datetime.date: The date portion.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTimestamp.Timestamp.get_time", "modulename": "SignalCliApi.signalTimestamp", "qualname": "Timestamp.get_time", "kind": "function", "doc": "<p>Get the time portion of the datetime.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>datetime.time: The time portion.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span>:</span></span>", "funcdef": "def"}, {"fullname": "SignalCliApi.signalTypingMessage", "modulename": "SignalCliApi.signalTypingMessage", "kind": "module", "doc": "<p>File: signalTypingMessage.py\nStore and handle a typing message.</p>\n"}, {"fullname": "SignalCliApi.signalTypingMessage.TypingMessage", "modulename": "SignalCliApi.signalTypingMessage", "qualname": "TypingMessage", "kind": "class", "doc": "<p>Class to store a typing message.</p>\n", "bases": "SignalCliApi.signalMessage.Message"}, {"fullname": "SignalCliApi.signalTypingMessage.TypingMessage.__init__", "modulename": "SignalCliApi.signalTypingMessage", "qualname": "TypingMessage.__init__", "kind": "function", "doc": "<p>Initialize a Typing Message.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>command_socket: socket.socket</strong>:  The socket to run commands on.</li>\n<li><strong>account_id: str</strong>:  This accounts' ID.</li>\n<li><strong>config_path: str</strong>:  The full path to the signal-cli config directory.</li>\n<li><strong>contacts: Contacts</strong>:  This accounts' Contacts object.</li>\n<li><strong>groups: Groups</strong>:  This accounts' Groups object.</li>\n<li><strong>devices: Devices</strong>:  This accounts' Devices object.</li>\n<li><strong>this_device: Device</strong>:  The Device object that represents the device we're on.</li>\n<li><strong>from_dict: Optional[dict[str, Any]]</strong>:  The dict created to __to_dict__().</li>\n<li><strong>raw_message: Optional[dict[str, Any]]</strong>:  A dict provided by Signal.</li>\n<li><strong>sender: Optional[Contact]</strong>:  The sender of this message.</li>\n<li><strong>recipient: Optional[Contact | Group]</strong>:  The recipient of the message.</li>\n<li><strong>device: Optional[Device]</strong>:  The device that generated this message.</li>\n<li><strong>timestamp: Optional[Timestamp]</strong>:  The timestamp of this message.</li>\n<li><strong>action: TypingStates</strong>:  The typing state, either started or stopped.</li>\n<li><strong>time_changed: Optional[Timestamp]</strong>:  The time the typing state changed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">command_socket</span><span class=\"p\">:</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span>,</span><span class=\"param\">\t<span class=\"n\">account_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">config_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">contacts</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContacts</span><span class=\"o\">.</span><span class=\"n\">Contacts</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroups</span><span class=\"o\">.</span><span class=\"n\">Groups</span>,</span><span class=\"param\">\t<span class=\"n\">devices</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevices</span><span class=\"o\">.</span><span class=\"n\">Devices</span>,</span><span class=\"param\">\t<span class=\"n\">this_device</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span>,</span><span class=\"param\">\t<span class=\"n\">from_dict</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">raw_message</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sender</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">recipient</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalContact</span><span class=\"o\">.</span><span class=\"n\">Contact</span><span class=\"p\">,</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalGroup</span><span class=\"o\">.</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalDevice</span><span class=\"o\">.</span><span class=\"n\">Device</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">timestamp</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">action</span><span class=\"p\">:</span> <span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalCommon</span><span class=\"o\">.</span><span class=\"n\">TypingStates</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">TypingStates</span><span class=\"o\">.</span><span class=\"n\">NOT_SET</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">time_changed</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">SignalCliApi</span><span class=\"o\">.</span><span class=\"n\">signalTimestamp</span><span class=\"o\">.</span><span class=\"n\">Timestamp</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "SignalCliApi.signalTypingMessage.TypingMessage.action", "modulename": "SignalCliApi.signalTypingMessage", "qualname": "TypingMessage.action", "kind": "variable", "doc": "<p>The action being preformed. Either STARTED or STOPPED.</p>\n", "annotation": ": SignalCliApi.signalCommon.TypingStates"}, {"fullname": "SignalCliApi.signalTypingMessage.TypingMessage.time_changed", "modulename": "SignalCliApi.signalTypingMessage", "qualname": "TypingMessage.time_changed", "kind": "variable", "doc": "<p>The Timestamp of the action change.</p>\n", "annotation": ": Optional[SignalCliApi.signalTimestamp.Timestamp]"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();